
rtos8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004838  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08004948  08004948  00005948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a78  08004a78  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  08004a78  08004a78  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a78  08004a78  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a78  08004a78  00005a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a7c  08004a7c  00005a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004a80  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001980  20000014  08004a94  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001994  08004a94  00006994  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c42e  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002341  00000000  00000000  0001246b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  000147b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000889  00000000  00000000  00015300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020ca  00000000  00000000  00015b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccfb  00000000  00000000  00017c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c94  00000000  00000000  0002494e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad5e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d14  00000000  00000000  000ad628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b033c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08004930 	.word	0x08004930

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08004930 	.word	0x08004930

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	StartFlag = 1;
 8000154:	4b20      	ldr	r3, [pc, #128]	@ (80001d8 <main+0x88>)
 8000156:	2201      	movs	r2, #1
 8000158:	701a      	strb	r2, [r3, #0]
	GreenFlag = 1;
 800015a:	4b20      	ldr	r3, [pc, #128]	@ (80001dc <main+0x8c>)
 800015c:	2201      	movs	r2, #1
 800015e:	701a      	strb	r2, [r3, #0]
	RedFlag = 1;
 8000160:	4b1f      	ldr	r3, [pc, #124]	@ (80001e0 <main+0x90>)
 8000162:	2201      	movs	r2, #1
 8000164:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 f9ff 	bl	8000568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f859 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f893 	bl	8000298 <MX_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000172:	2201      	movs	r2, #1
 8000174:	2104      	movs	r1, #4
 8000176:	481b      	ldr	r0, [pc, #108]	@ (80001e4 <main+0x94>)
 8000178:	f000 fce4 	bl	8000b44 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800017c:	f001 f8f2 	bl	8001364 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CriticalResourceSemaphore */
  CriticalResourceSemaphoreHandle = osSemaphoreNew(1, 1, &CriticalResourceSemaphore_attributes);
 8000180:	4a19      	ldr	r2, [pc, #100]	@ (80001e8 <main+0x98>)
 8000182:	2101      	movs	r1, #1
 8000184:	2001      	movs	r0, #1
 8000186:	f001 fa2b 	bl	80015e0 <osSemaphoreNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a17      	ldr	r2, [pc, #92]	@ (80001ec <main+0x9c>)
 800018e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000190:	4a17      	ldr	r2, [pc, #92]	@ (80001f0 <main+0xa0>)
 8000192:	2100      	movs	r1, #0
 8000194:	4817      	ldr	r0, [pc, #92]	@ (80001f4 <main+0xa4>)
 8000196:	f001 f94b 	bl	8001430 <osThreadNew>
 800019a:	4603      	mov	r3, r0
 800019c:	4a16      	ldr	r2, [pc, #88]	@ (80001f8 <main+0xa8>)
 800019e:	6013      	str	r3, [r2, #0]

  /* creation of StartGreenLed */
  StartGreenLedHandle = osThreadNew(GreenLedTask, NULL, &StartGreenLed_attributes);
 80001a0:	4a16      	ldr	r2, [pc, #88]	@ (80001fc <main+0xac>)
 80001a2:	2100      	movs	r1, #0
 80001a4:	4816      	ldr	r0, [pc, #88]	@ (8000200 <main+0xb0>)
 80001a6:	f001 f943 	bl	8001430 <osThreadNew>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a15      	ldr	r2, [pc, #84]	@ (8000204 <main+0xb4>)
 80001ae:	6013      	str	r3, [r2, #0]

  /* creation of StartRedLed */
  StartRedLedHandle = osThreadNew(RedLedTask, NULL, &StartRedLed_attributes);
 80001b0:	4a15      	ldr	r2, [pc, #84]	@ (8000208 <main+0xb8>)
 80001b2:	2100      	movs	r1, #0
 80001b4:	4815      	ldr	r0, [pc, #84]	@ (800020c <main+0xbc>)
 80001b6:	f001 f93b 	bl	8001430 <osThreadNew>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a14      	ldr	r2, [pc, #80]	@ (8000210 <main+0xc0>)
 80001be:	6013      	str	r3, [r2, #0]

  /* creation of StartOrangeLed */
  StartOrangeLedHandle = osThreadNew(OrangeLedTask, NULL, &StartOrangeLed_attributes);
 80001c0:	4a14      	ldr	r2, [pc, #80]	@ (8000214 <main+0xc4>)
 80001c2:	2100      	movs	r1, #0
 80001c4:	4814      	ldr	r0, [pc, #80]	@ (8000218 <main+0xc8>)
 80001c6:	f001 f933 	bl	8001430 <osThreadNew>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4a13      	ldr	r2, [pc, #76]	@ (800021c <main+0xcc>)
 80001ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001d0:	f001 f8fa 	bl	80013c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d4:	bf00      	nop
 80001d6:	e7fd      	b.n	80001d4 <main+0x84>
 80001d8:	20000044 	.word	0x20000044
 80001dc:	20000046 	.word	0x20000046
 80001e0:	20000045 	.word	0x20000045
 80001e4:	40010800 	.word	0x40010800
 80001e8:	08004a44 	.word	0x08004a44
 80001ec:	20000040 	.word	0x20000040
 80001f0:	080049b4 	.word	0x080049b4
 80001f4:	08000341 	.word	0x08000341
 80001f8:	20000030 	.word	0x20000030
 80001fc:	080049d8 	.word	0x080049d8
 8000200:	08000351 	.word	0x08000351
 8000204:	20000034 	.word	0x20000034
 8000208:	080049fc 	.word	0x080049fc
 800020c:	080003b9 	.word	0x080003b9
 8000210:	20000038 	.word	0x20000038
 8000214:	08004a20 	.word	0x08004a20
 8000218:	08000425 	.word	0x08000425
 800021c:	2000003c 	.word	0x2000003c

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	@ 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	@ 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f004 fb44 	bl	80048bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	2310      	movs	r3, #16
 800024c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800024e:	2300      	movs	r3, #0
 8000250:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fca6 	bl	8000ba8 <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000262:	f000 f8ef 	bl	8000444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	230f      	movs	r3, #15
 8000268:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026a:	2300      	movs	r3, #0
 800026c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f000 ff14 	bl	80010ac <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800028a:	f000 f8db 	bl	8000444 <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3740      	adds	r7, #64	@ 0x40
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029e:	f107 0308 	add.w	r3, r7, #8
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ac:	4b11      	ldr	r3, [pc, #68]	@ (80002f4 <MX_GPIO_Init+0x5c>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a10      	ldr	r2, [pc, #64]	@ (80002f4 <MX_GPIO_Init+0x5c>)
 80002b2:	f043 0304 	orr.w	r3, r3, #4
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b0e      	ldr	r3, [pc, #56]	@ (80002f4 <MX_GPIO_Init+0x5c>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0304 	and.w	r3, r3, #4
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	210f      	movs	r1, #15
 80002c8:	480b      	ldr	r0, [pc, #44]	@ (80002f8 <MX_GPIO_Init+0x60>)
 80002ca:	f000 fc3b 	bl	8000b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80002ce:	230f      	movs	r3, #15
 80002d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	2301      	movs	r3, #1
 80002d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	2300      	movs	r3, #0
 80002d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002da:	2302      	movs	r3, #2
 80002dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	4619      	mov	r1, r3
 80002e4:	4804      	ldr	r0, [pc, #16]	@ (80002f8 <MX_GPIO_Init+0x60>)
 80002e6:	f000 faa9 	bl	800083c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ea:	bf00      	nop
 80002ec:	3718      	adds	r7, #24
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40021000 	.word	0x40021000
 80002f8:	40010800 	.word	0x40010800

080002fc <AccessSharedData>:

/* USER CODE BEGIN 4 */
void AccessSharedData(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
    if (StartFlag == 1) {
 8000300:	4b0d      	ldr	r3, [pc, #52]	@ (8000338 <AccessSharedData+0x3c>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d103      	bne.n	8000310 <AccessSharedData+0x14>
        // Set Start flag to Down to indicate resource is in use
        StartFlag = 0;
 8000308:	4b0b      	ldr	r3, [pc, #44]	@ (8000338 <AccessSharedData+0x3c>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
 800030e:	e004      	b.n	800031a <AccessSharedData+0x1e>
    } else {
        // Resource contention: Turn on Blue LED
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	2104      	movs	r1, #4
 8000314:	4809      	ldr	r0, [pc, #36]	@ (800033c <AccessSharedData+0x40>)
 8000316:	f000 fc15 	bl	8000b44 <HAL_GPIO_WritePin>
    }

    // Simulate read/write operations with a delay of 500 milliseconds
    // SimulateReadWriteOperation();
    HAL_Delay(500);
 800031a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800031e:	f000 f985 	bl	800062c <HAL_Delay>

    // Set Start flag back to Up to indicate resource is free
    StartFlag = 1;
 8000322:	4b05      	ldr	r3, [pc, #20]	@ (8000338 <AccessSharedData+0x3c>)
 8000324:	2201      	movs	r2, #1
 8000326:	701a      	strb	r2, [r3, #0]

    // Turn off Blue LED (if it was turned on during contention)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2104      	movs	r1, #4
 800032c:	4803      	ldr	r0, [pc, #12]	@ (800033c <AccessSharedData+0x40>)
 800032e:	f000 fc09 	bl	8000b44 <HAL_GPIO_WritePin>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000044 	.word	0x20000044
 800033c:	40010800 	.word	0x40010800

08000340 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000348:	2001      	movs	r0, #1
 800034a:	f001 f91b 	bl	8001584 <osDelay>
 800034e:	e7fb      	b.n	8000348 <StartDefaultTask+0x8>

08000350 <GreenLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenLedTask */
void GreenLedTask(void *argument)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenLedTask */
  /* Infinite loop */
  for(;;)
  {
	  GreenFlag = 1;
 8000358:	4b13      	ldr	r3, [pc, #76]	@ (80003a8 <GreenLedTask+0x58>)
 800035a:	2201      	movs	r2, #1
 800035c:	701a      	strb	r2, [r3, #0]
	  // Turn on Green LED
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800035e:	2201      	movs	r2, #1
 8000360:	2101      	movs	r1, #1
 8000362:	4812      	ldr	r0, [pc, #72]	@ (80003ac <GreenLedTask+0x5c>)
 8000364:	f000 fbee 	bl	8000b44 <HAL_GPIO_WritePin>

	  // Enter critical section
	  osSemaphoreAcquire(CriticalResourceSemaphoreHandle,WaitTimeMilliseconds);
 8000368:	4b11      	ldr	r3, [pc, #68]	@ (80003b0 <GreenLedTask+0x60>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a11      	ldr	r2, [pc, #68]	@ (80003b4 <GreenLedTask+0x64>)
 800036e:	8812      	ldrh	r2, [r2, #0]
 8000370:	4611      	mov	r1, r2
 8000372:	4618      	mov	r0, r3
 8000374:	f001 f9d0 	bl	8001718 <osSemaphoreAcquire>
	  AccessSharedData();
 8000378:	f7ff ffc0 	bl	80002fc <AccessSharedData>
	  osSemaphoreRelease (CriticalResourceSemaphoreHandle);
 800037c:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <GreenLedTask+0x60>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4618      	mov	r0, r3
 8000382:	f001 fa2f 	bl	80017e4 <osSemaphoreRelease>

	  // Turn off Green LED
	  osDelay(200);
 8000386:	20c8      	movs	r0, #200	@ 0xc8
 8000388:	f001 f8fc 	bl	8001584 <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2101      	movs	r1, #1
 8000390:	4806      	ldr	r0, [pc, #24]	@ (80003ac <GreenLedTask+0x5c>)
 8000392:	f000 fbd7 	bl	8000b44 <HAL_GPIO_WritePin>

	  GreenFlag = 0;
 8000396:	4b04      	ldr	r3, [pc, #16]	@ (80003a8 <GreenLedTask+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	701a      	strb	r2, [r3, #0]
	  // Delay
	  osDelay(200);
 800039c:	20c8      	movs	r0, #200	@ 0xc8
 800039e:	f001 f8f1 	bl	8001584 <osDelay>
	  GreenFlag = 1;
 80003a2:	bf00      	nop
 80003a4:	e7d8      	b.n	8000358 <GreenLedTask+0x8>
 80003a6:	bf00      	nop
 80003a8:	20000046 	.word	0x20000046
 80003ac:	40010800 	.word	0x40010800
 80003b0:	20000040 	.word	0x20000040
 80003b4:	20000000 	.word	0x20000000

080003b8 <RedLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedLedTask */
void RedLedTask(void *argument)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedLedTask */
  /* Infinite loop */
  for(;;)
  {
      RedFlag = 1;
 80003c0:	4b14      	ldr	r3, [pc, #80]	@ (8000414 <RedLedTask+0x5c>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	701a      	strb	r2, [r3, #0]
      // Turn on Red LED
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2102      	movs	r1, #2
 80003ca:	4813      	ldr	r0, [pc, #76]	@ (8000418 <RedLedTask+0x60>)
 80003cc:	f000 fbba 	bl	8000b44 <HAL_GPIO_WritePin>

      // Enter critical section
      osSemaphoreAcquire(CriticalResourceSemaphoreHandle,WaitTimeMilliseconds);
 80003d0:	4b12      	ldr	r3, [pc, #72]	@ (800041c <RedLedTask+0x64>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a12      	ldr	r2, [pc, #72]	@ (8000420 <RedLedTask+0x68>)
 80003d6:	8812      	ldrh	r2, [r2, #0]
 80003d8:	4611      	mov	r1, r2
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 f99c 	bl	8001718 <osSemaphoreAcquire>
      AccessSharedData();
 80003e0:	f7ff ff8c 	bl	80002fc <AccessSharedData>
      osSemaphoreRelease (CriticalResourceSemaphoreHandle);
 80003e4:	4b0d      	ldr	r3, [pc, #52]	@ (800041c <RedLedTask+0x64>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 f9fb 	bl	80017e4 <osSemaphoreRelease>

      // Turn off Red LED
      osDelay(550);
 80003ee:	f240 2026 	movw	r0, #550	@ 0x226
 80003f2:	f001 f8c7 	bl	8001584 <osDelay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2102      	movs	r1, #2
 80003fa:	4807      	ldr	r0, [pc, #28]	@ (8000418 <RedLedTask+0x60>)
 80003fc:	f000 fba2 	bl	8000b44 <HAL_GPIO_WritePin>

      RedFlag = 0;
 8000400:	4b04      	ldr	r3, [pc, #16]	@ (8000414 <RedLedTask+0x5c>)
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
      // Delay
      osDelay(550);
 8000406:	f240 2026 	movw	r0, #550	@ 0x226
 800040a:	f001 f8bb 	bl	8001584 <osDelay>
      RedFlag = 1;
 800040e:	bf00      	nop
 8000410:	e7d6      	b.n	80003c0 <RedLedTask+0x8>
 8000412:	bf00      	nop
 8000414:	20000045 	.word	0x20000045
 8000418:	40010800 	.word	0x40010800
 800041c:	20000040 	.word	0x20000040
 8000420:	20000000 	.word	0x20000000

08000424 <OrangeLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OrangeLedTask */
void OrangeLedTask(void *argument)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OrangeLedTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800042c:	2108      	movs	r1, #8
 800042e:	4804      	ldr	r0, [pc, #16]	@ (8000440 <OrangeLedTask+0x1c>)
 8000430:	f000 fba0 	bl	8000b74 <HAL_GPIO_TogglePin>
	  osDelay(50);
 8000434:	2032      	movs	r0, #50	@ 0x32
 8000436:	f001 f8a5 	bl	8001584 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800043a:	bf00      	nop
 800043c:	e7f6      	b.n	800042c <OrangeLedTask+0x8>
 800043e:	bf00      	nop
 8000440:	40010800 	.word	0x40010800

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <Error_Handler+0x8>

08000450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000456:	4b18      	ldr	r3, [pc, #96]	@ (80004b8 <HAL_MspInit+0x68>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a17      	ldr	r2, [pc, #92]	@ (80004b8 <HAL_MspInit+0x68>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6193      	str	r3, [r2, #24]
 8000462:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <HAL_MspInit+0x68>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <HAL_MspInit+0x68>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	4a11      	ldr	r2, [pc, #68]	@ (80004b8 <HAL_MspInit+0x68>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000478:	61d3      	str	r3, [r2, #28]
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <HAL_MspInit+0x68>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	210f      	movs	r1, #15
 800048a:	f06f 0001 	mvn.w	r0, #1
 800048e:	f000 f9ac 	bl	80007ea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000492:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <HAL_MspInit+0x6c>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	4a04      	ldr	r2, [pc, #16]	@ (80004bc <HAL_MspInit+0x6c>)
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <NMI_Handler+0x4>

080004c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <HardFault_Handler+0x4>

080004d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <MemManage_Handler+0x4>

080004d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <BusFault_Handler+0x4>

080004e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <UsageFault_Handler+0x4>

080004e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f8:	f000 f87c 	bl	80005f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004fc:	f003 f8fe 	bl	80036fc <xTaskGetSchedulerState>
 8000500:	4603      	mov	r3, r0
 8000502:	2b01      	cmp	r3, #1
 8000504:	d001      	beq.n	800050a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000506:	f003 ff77 	bl	80043f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}

0800050e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
	...

0800051c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800051c:	f7ff fff7 	bl	800050e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480b      	ldr	r0, [pc, #44]	@ (8000550 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000522:	490c      	ldr	r1, [pc, #48]	@ (8000554 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000524:	4a0c      	ldr	r2, [pc, #48]	@ (8000558 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a09      	ldr	r2, [pc, #36]	@ (800055c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000538:	4c09      	ldr	r4, [pc, #36]	@ (8000560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000546:	f004 f9c1 	bl	80048cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054a:	f7ff fe01 	bl	8000150 <main>
  bx lr
 800054e:	4770      	bx	lr
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000558:	08004a80 	.word	0x08004a80
  ldr r2, =_sbss
 800055c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000560:	20001994 	.word	0x20001994

08000564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC1_2_IRQHandler>
	...

08000568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800056c:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <HAL_Init+0x28>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a07      	ldr	r2, [pc, #28]	@ (8000590 <HAL_Init+0x28>)
 8000572:	f043 0310 	orr.w	r3, r3, #16
 8000576:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f92b 	bl	80007d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	200f      	movs	r0, #15
 8000580:	f000 f808 	bl	8000594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000584:	f7ff ff64 	bl	8000450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40022000 	.word	0x40022000

08000594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800059c:	4b12      	ldr	r3, [pc, #72]	@ (80005e8 <HAL_InitTick+0x54>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <HAL_InitTick+0x58>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f935 	bl	8000822 <HAL_SYSTICK_Config>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005be:	2301      	movs	r3, #1
 80005c0:	e00e      	b.n	80005e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b0f      	cmp	r3, #15
 80005c6:	d80a      	bhi.n	80005de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c8:	2200      	movs	r2, #0
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	f04f 30ff 	mov.w	r0, #4294967295
 80005d0:	f000 f90b 	bl	80007ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d4:	4a06      	ldr	r2, [pc, #24]	@ (80005f0 <HAL_InitTick+0x5c>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005da:	2300      	movs	r3, #0
 80005dc:	e000      	b.n	80005e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000004 	.word	0x20000004
 80005ec:	2000000c 	.word	0x2000000c
 80005f0:	20000008 	.word	0x20000008

080005f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f8:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <HAL_IncTick+0x1c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <HAL_IncTick+0x20>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4413      	add	r3, r2
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <HAL_IncTick+0x20>)
 8000606:	6013      	str	r3, [r2, #0]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	2000000c 	.word	0x2000000c
 8000614:	20000048 	.word	0x20000048

08000618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;
 800061c:	4b02      	ldr	r3, [pc, #8]	@ (8000628 <HAL_GetTick+0x10>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	20000048 	.word	0x20000048

0800062c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000634:	f7ff fff0 	bl	8000618 <HAL_GetTick>
 8000638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000644:	d005      	beq.n	8000652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <HAL_Delay+0x44>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000652:	bf00      	nop
 8000654:	f7ff ffe0 	bl	8000618 <HAL_GetTick>
 8000658:	4602      	mov	r2, r0
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	429a      	cmp	r2, r3
 8000662:	d8f7      	bhi.n	8000654 <HAL_Delay+0x28>
  {
  }
}
 8000664:	bf00      	nop
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000000c 	.word	0x2000000c

08000674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000684:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800069c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a6:	4a04      	ldr	r2, [pc, #16]	@ (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60d3      	str	r3, [r2, #12]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b04      	ldr	r3, [pc, #16]	@ (80006d4 <__NVIC_GetPriorityGrouping+0x18>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	f003 0307 	and.w	r3, r3, #7
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	@ (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	@ (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072c:	b480      	push	{r7}
 800072e:	b089      	sub	sp, #36	@ 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	f1c3 0307 	rsb	r3, r3, #7
 8000746:	2b04      	cmp	r3, #4
 8000748:	bf28      	it	cs
 800074a:	2304      	movcs	r3, #4
 800074c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3304      	adds	r3, #4
 8000752:	2b06      	cmp	r3, #6
 8000754:	d902      	bls.n	800075c <NVIC_EncodePriority+0x30>
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3b03      	subs	r3, #3
 800075a:	e000      	b.n	800075e <NVIC_EncodePriority+0x32>
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	f04f 32ff 	mov.w	r2, #4294967295
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	401a      	ands	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000774:	f04f 31ff 	mov.w	r1, #4294967295
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43d9      	mvns	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	4313      	orrs	r3, r2
         );
}
 8000786:	4618      	mov	r0, r3
 8000788:	3724      	adds	r7, #36	@ 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007a0:	d301      	bcc.n	80007a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a2:	2301      	movs	r3, #1
 80007a4:	e00f      	b.n	80007c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <SysTick_Config+0x40>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ae:	210f      	movs	r1, #15
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295
 80007b4:	f7ff ff90 	bl	80006d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b8:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <SysTick_Config+0x40>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007be:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <SysTick_Config+0x40>)
 80007c0:	2207      	movs	r2, #7
 80007c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	e000e010 	.word	0xe000e010

080007d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff49 	bl	8000674 <__NVIC_SetPriorityGrouping>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007fc:	f7ff ff5e 	bl	80006bc <__NVIC_GetPriorityGrouping>
 8000800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	6978      	ldr	r0, [r7, #20]
 8000808:	f7ff ff90 	bl	800072c <NVIC_EncodePriority>
 800080c:	4602      	mov	r2, r0
 800080e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff5f 	bl	80006d8 <__NVIC_SetPriority>
}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ffb0 	bl	8000790 <SysTick_Config>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800083c:	b480      	push	{r7}
 800083e:	b08b      	sub	sp, #44	@ 0x2c
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800084e:	e169      	b.n	8000b24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000850:	2201      	movs	r2, #1
 8000852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	69fa      	ldr	r2, [r7, #28]
 8000860:	4013      	ands	r3, r2
 8000862:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	429a      	cmp	r2, r3
 800086a:	f040 8158 	bne.w	8000b1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	4a9a      	ldr	r2, [pc, #616]	@ (8000adc <HAL_GPIO_Init+0x2a0>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d05e      	beq.n	8000936 <HAL_GPIO_Init+0xfa>
 8000878:	4a98      	ldr	r2, [pc, #608]	@ (8000adc <HAL_GPIO_Init+0x2a0>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d875      	bhi.n	800096a <HAL_GPIO_Init+0x12e>
 800087e:	4a98      	ldr	r2, [pc, #608]	@ (8000ae0 <HAL_GPIO_Init+0x2a4>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d058      	beq.n	8000936 <HAL_GPIO_Init+0xfa>
 8000884:	4a96      	ldr	r2, [pc, #600]	@ (8000ae0 <HAL_GPIO_Init+0x2a4>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d86f      	bhi.n	800096a <HAL_GPIO_Init+0x12e>
 800088a:	4a96      	ldr	r2, [pc, #600]	@ (8000ae4 <HAL_GPIO_Init+0x2a8>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d052      	beq.n	8000936 <HAL_GPIO_Init+0xfa>
 8000890:	4a94      	ldr	r2, [pc, #592]	@ (8000ae4 <HAL_GPIO_Init+0x2a8>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d869      	bhi.n	800096a <HAL_GPIO_Init+0x12e>
 8000896:	4a94      	ldr	r2, [pc, #592]	@ (8000ae8 <HAL_GPIO_Init+0x2ac>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d04c      	beq.n	8000936 <HAL_GPIO_Init+0xfa>
 800089c:	4a92      	ldr	r2, [pc, #584]	@ (8000ae8 <HAL_GPIO_Init+0x2ac>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d863      	bhi.n	800096a <HAL_GPIO_Init+0x12e>
 80008a2:	4a92      	ldr	r2, [pc, #584]	@ (8000aec <HAL_GPIO_Init+0x2b0>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d046      	beq.n	8000936 <HAL_GPIO_Init+0xfa>
 80008a8:	4a90      	ldr	r2, [pc, #576]	@ (8000aec <HAL_GPIO_Init+0x2b0>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d85d      	bhi.n	800096a <HAL_GPIO_Init+0x12e>
 80008ae:	2b12      	cmp	r3, #18
 80008b0:	d82a      	bhi.n	8000908 <HAL_GPIO_Init+0xcc>
 80008b2:	2b12      	cmp	r3, #18
 80008b4:	d859      	bhi.n	800096a <HAL_GPIO_Init+0x12e>
 80008b6:	a201      	add	r2, pc, #4	@ (adr r2, 80008bc <HAL_GPIO_Init+0x80>)
 80008b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008bc:	08000937 	.word	0x08000937
 80008c0:	08000911 	.word	0x08000911
 80008c4:	08000923 	.word	0x08000923
 80008c8:	08000965 	.word	0x08000965
 80008cc:	0800096b 	.word	0x0800096b
 80008d0:	0800096b 	.word	0x0800096b
 80008d4:	0800096b 	.word	0x0800096b
 80008d8:	0800096b 	.word	0x0800096b
 80008dc:	0800096b 	.word	0x0800096b
 80008e0:	0800096b 	.word	0x0800096b
 80008e4:	0800096b 	.word	0x0800096b
 80008e8:	0800096b 	.word	0x0800096b
 80008ec:	0800096b 	.word	0x0800096b
 80008f0:	0800096b 	.word	0x0800096b
 80008f4:	0800096b 	.word	0x0800096b
 80008f8:	0800096b 	.word	0x0800096b
 80008fc:	0800096b 	.word	0x0800096b
 8000900:	08000919 	.word	0x08000919
 8000904:	0800092d 	.word	0x0800092d
 8000908:	4a79      	ldr	r2, [pc, #484]	@ (8000af0 <HAL_GPIO_Init+0x2b4>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d013      	beq.n	8000936 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800090e:	e02c      	b.n	800096a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	623b      	str	r3, [r7, #32]
          break;
 8000916:	e029      	b.n	800096c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	3304      	adds	r3, #4
 800091e:	623b      	str	r3, [r7, #32]
          break;
 8000920:	e024      	b.n	800096c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	3308      	adds	r3, #8
 8000928:	623b      	str	r3, [r7, #32]
          break;
 800092a:	e01f      	b.n	800096c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	330c      	adds	r3, #12
 8000932:	623b      	str	r3, [r7, #32]
          break;
 8000934:	e01a      	b.n	800096c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d102      	bne.n	8000944 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800093e:	2304      	movs	r3, #4
 8000940:	623b      	str	r3, [r7, #32]
          break;
 8000942:	e013      	b.n	800096c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d105      	bne.n	8000958 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800094c:	2308      	movs	r3, #8
 800094e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	69fa      	ldr	r2, [r7, #28]
 8000954:	611a      	str	r2, [r3, #16]
          break;
 8000956:	e009      	b.n	800096c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000958:	2308      	movs	r3, #8
 800095a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	69fa      	ldr	r2, [r7, #28]
 8000960:	615a      	str	r2, [r3, #20]
          break;
 8000962:	e003      	b.n	800096c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
          break;
 8000968:	e000      	b.n	800096c <HAL_GPIO_Init+0x130>
          break;
 800096a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	2bff      	cmp	r3, #255	@ 0xff
 8000970:	d801      	bhi.n	8000976 <HAL_GPIO_Init+0x13a>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	e001      	b.n	800097a <HAL_GPIO_Init+0x13e>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3304      	adds	r3, #4
 800097a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	2bff      	cmp	r3, #255	@ 0xff
 8000980:	d802      	bhi.n	8000988 <HAL_GPIO_Init+0x14c>
 8000982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	e002      	b.n	800098e <HAL_GPIO_Init+0x152>
 8000988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098a:	3b08      	subs	r3, #8
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	210f      	movs	r1, #15
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	401a      	ands	r2, r3
 80009a0:	6a39      	ldr	r1, [r7, #32]
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	fa01 f303 	lsl.w	r3, r1, r3
 80009a8:	431a      	orrs	r2, r3
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f000 80b1 	beq.w	8000b1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009bc:	4b4d      	ldr	r3, [pc, #308]	@ (8000af4 <HAL_GPIO_Init+0x2b8>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a4c      	ldr	r2, [pc, #304]	@ (8000af4 <HAL_GPIO_Init+0x2b8>)
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b4a      	ldr	r3, [pc, #296]	@ (8000af4 <HAL_GPIO_Init+0x2b8>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009d4:	4a48      	ldr	r2, [pc, #288]	@ (8000af8 <HAL_GPIO_Init+0x2bc>)
 80009d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d8:	089b      	lsrs	r3, r3, #2
 80009da:	3302      	adds	r3, #2
 80009dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e4:	f003 0303 	and.w	r3, r3, #3
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	220f      	movs	r2, #15
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	4013      	ands	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a40      	ldr	r2, [pc, #256]	@ (8000afc <HAL_GPIO_Init+0x2c0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d013      	beq.n	8000a28 <HAL_GPIO_Init+0x1ec>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a3f      	ldr	r2, [pc, #252]	@ (8000b00 <HAL_GPIO_Init+0x2c4>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d00d      	beq.n	8000a24 <HAL_GPIO_Init+0x1e8>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a3e      	ldr	r2, [pc, #248]	@ (8000b04 <HAL_GPIO_Init+0x2c8>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d007      	beq.n	8000a20 <HAL_GPIO_Init+0x1e4>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a3d      	ldr	r2, [pc, #244]	@ (8000b08 <HAL_GPIO_Init+0x2cc>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d101      	bne.n	8000a1c <HAL_GPIO_Init+0x1e0>
 8000a18:	2303      	movs	r3, #3
 8000a1a:	e006      	b.n	8000a2a <HAL_GPIO_Init+0x1ee>
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	e004      	b.n	8000a2a <HAL_GPIO_Init+0x1ee>
 8000a20:	2302      	movs	r3, #2
 8000a22:	e002      	b.n	8000a2a <HAL_GPIO_Init+0x1ee>
 8000a24:	2301      	movs	r3, #1
 8000a26:	e000      	b.n	8000a2a <HAL_GPIO_Init+0x1ee>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a2c:	f002 0203 	and.w	r2, r2, #3
 8000a30:	0092      	lsls	r2, r2, #2
 8000a32:	4093      	lsls	r3, r2
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a3a:	492f      	ldr	r1, [pc, #188]	@ (8000af8 <HAL_GPIO_Init+0x2bc>)
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	089b      	lsrs	r3, r3, #2
 8000a40:	3302      	adds	r3, #2
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d006      	beq.n	8000a62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a54:	4b2d      	ldr	r3, [pc, #180]	@ (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000a56:	689a      	ldr	r2, [r3, #8]
 8000a58:	492c      	ldr	r1, [pc, #176]	@ (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	608b      	str	r3, [r1, #8]
 8000a60:	e006      	b.n	8000a70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a62:	4b2a      	ldr	r3, [pc, #168]	@ (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	4928      	ldr	r1, [pc, #160]	@ (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d006      	beq.n	8000a8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a7c:	4b23      	ldr	r3, [pc, #140]	@ (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	4922      	ldr	r1, [pc, #136]	@ (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	60cb      	str	r3, [r1, #12]
 8000a88:	e006      	b.n	8000a98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a8a:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000a8c:	68da      	ldr	r2, [r3, #12]
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	43db      	mvns	r3, r3
 8000a92:	491e      	ldr	r1, [pc, #120]	@ (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000a94:	4013      	ands	r3, r2
 8000a96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aa4:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000aa6:	685a      	ldr	r2, [r3, #4]
 8000aa8:	4918      	ldr	r1, [pc, #96]	@ (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	604b      	str	r3, [r1, #4]
 8000ab0:	e006      	b.n	8000ac0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ab2:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	4914      	ldr	r1, [pc, #80]	@ (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d021      	beq.n	8000b10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	490e      	ldr	r1, [pc, #56]	@ (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	600b      	str	r3, [r1, #0]
 8000ad8:	e021      	b.n	8000b1e <HAL_GPIO_Init+0x2e2>
 8000ada:	bf00      	nop
 8000adc:	10320000 	.word	0x10320000
 8000ae0:	10310000 	.word	0x10310000
 8000ae4:	10220000 	.word	0x10220000
 8000ae8:	10210000 	.word	0x10210000
 8000aec:	10120000 	.word	0x10120000
 8000af0:	10110000 	.word	0x10110000
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010000 	.word	0x40010000
 8000afc:	40010800 	.word	0x40010800
 8000b00:	40010c00 	.word	0x40010c00
 8000b04:	40011000 	.word	0x40011000
 8000b08:	40011400 	.word	0x40011400
 8000b0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b10:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <HAL_GPIO_Init+0x304>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	4909      	ldr	r1, [pc, #36]	@ (8000b40 <HAL_GPIO_Init+0x304>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b20:	3301      	adds	r3, #1
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f47f ae8e 	bne.w	8000850 <HAL_GPIO_Init+0x14>
  }
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	372c      	adds	r7, #44	@ 0x2c
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	40010400 	.word	0x40010400

08000b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	807b      	strh	r3, [r7, #2]
 8000b50:	4613      	mov	r3, r2
 8000b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b54:	787b      	ldrb	r3, [r7, #1]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b5a:	887a      	ldrh	r2, [r7, #2]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b60:	e003      	b.n	8000b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b62:	887b      	ldrh	r3, [r7, #2]
 8000b64:	041a      	lsls	r2, r3, #16
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	611a      	str	r2, [r3, #16]
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b86:	887a      	ldrh	r2, [r7, #2]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	041a      	lsls	r2, r3, #16
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43d9      	mvns	r1, r3
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	400b      	ands	r3, r1
 8000b96:	431a      	orrs	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	611a      	str	r2, [r3, #16]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
	...

08000ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e272      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 8087 	beq.w	8000cd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bc8:	4b92      	ldr	r3, [pc, #584]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f003 030c 	and.w	r3, r3, #12
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d00c      	beq.n	8000bee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bd4:	4b8f      	ldr	r3, [pc, #572]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 030c 	and.w	r3, r3, #12
 8000bdc:	2b08      	cmp	r3, #8
 8000bde:	d112      	bne.n	8000c06 <HAL_RCC_OscConfig+0x5e>
 8000be0:	4b8c      	ldr	r3, [pc, #560]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bec:	d10b      	bne.n	8000c06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bee:	4b89      	ldr	r3, [pc, #548]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d06c      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x12c>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d168      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e24c      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c0e:	d106      	bne.n	8000c1e <HAL_RCC_OscConfig+0x76>
 8000c10:	4b80      	ldr	r3, [pc, #512]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a7f      	ldr	r2, [pc, #508]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	e02e      	b.n	8000c7c <HAL_RCC_OscConfig+0xd4>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10c      	bne.n	8000c40 <HAL_RCC_OscConfig+0x98>
 8000c26:	4b7b      	ldr	r3, [pc, #492]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a7a      	ldr	r2, [pc, #488]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	4b78      	ldr	r3, [pc, #480]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a77      	ldr	r2, [pc, #476]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	e01d      	b.n	8000c7c <HAL_RCC_OscConfig+0xd4>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c48:	d10c      	bne.n	8000c64 <HAL_RCC_OscConfig+0xbc>
 8000c4a:	4b72      	ldr	r3, [pc, #456]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a71      	ldr	r2, [pc, #452]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	4b6f      	ldr	r3, [pc, #444]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a6e      	ldr	r2, [pc, #440]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	e00b      	b.n	8000c7c <HAL_RCC_OscConfig+0xd4>
 8000c64:	4b6b      	ldr	r3, [pc, #428]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a6a      	ldr	r2, [pc, #424]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	4b68      	ldr	r3, [pc, #416]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a67      	ldr	r2, [pc, #412]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d013      	beq.n	8000cac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c84:	f7ff fcc8 	bl	8000618 <HAL_GetTick>
 8000c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8a:	e008      	b.n	8000c9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c8c:	f7ff fcc4 	bl	8000618 <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	2b64      	cmp	r3, #100	@ 0x64
 8000c98:	d901      	bls.n	8000c9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e200      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0f0      	beq.n	8000c8c <HAL_RCC_OscConfig+0xe4>
 8000caa:	e014      	b.n	8000cd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cac:	f7ff fcb4 	bl	8000618 <HAL_GetTick>
 8000cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb2:	e008      	b.n	8000cc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cb4:	f7ff fcb0 	bl	8000618 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b64      	cmp	r3, #100	@ 0x64
 8000cc0:	d901      	bls.n	8000cc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e1ec      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc6:	4b53      	ldr	r3, [pc, #332]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1f0      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x10c>
 8000cd2:	e000      	b.n	8000cd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d063      	beq.n	8000daa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 030c 	and.w	r3, r3, #12
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00b      	beq.n	8000d06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cee:	4b49      	ldr	r3, [pc, #292]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	2b08      	cmp	r3, #8
 8000cf8:	d11c      	bne.n	8000d34 <HAL_RCC_OscConfig+0x18c>
 8000cfa:	4b46      	ldr	r3, [pc, #280]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d116      	bne.n	8000d34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d06:	4b43      	ldr	r3, [pc, #268]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d005      	beq.n	8000d1e <HAL_RCC_OscConfig+0x176>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d001      	beq.n	8000d1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e1c0      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	4939      	ldr	r1, [pc, #228]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d32:	e03a      	b.n	8000daa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d020      	beq.n	8000d7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d3c:	4b36      	ldr	r3, [pc, #216]	@ (8000e18 <HAL_RCC_OscConfig+0x270>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d42:	f7ff fc69 	bl	8000618 <HAL_GetTick>
 8000d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d48:	e008      	b.n	8000d5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d4a:	f7ff fc65 	bl	8000618 <HAL_GetTick>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d901      	bls.n	8000d5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e1a1      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0f0      	beq.n	8000d4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d68:	4b2a      	ldr	r3, [pc, #168]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	4927      	ldr	r1, [pc, #156]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	600b      	str	r3, [r1, #0]
 8000d7c:	e015      	b.n	8000daa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d7e:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <HAL_RCC_OscConfig+0x270>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d84:	f7ff fc48 	bl	8000618 <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d8c:	f7ff fc44 	bl	8000618 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e180      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f0      	bne.n	8000d8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d03a      	beq.n	8000e2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d019      	beq.n	8000df2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dbe:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <HAL_RCC_OscConfig+0x274>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc4:	f7ff fc28 	bl	8000618 <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fc24 	bl	8000618 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e160      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dde:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f0      	beq.n	8000dcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f000 fa9c 	bl	8001328 <RCC_Delay>
 8000df0:	e01c      	b.n	8000e2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000df2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <HAL_RCC_OscConfig+0x274>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df8:	f7ff fc0e 	bl	8000618 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dfe:	e00f      	b.n	8000e20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e00:	f7ff fc0a 	bl	8000618 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d908      	bls.n	8000e20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e146      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	42420000 	.word	0x42420000
 8000e1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e20:	4b92      	ldr	r3, [pc, #584]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1e9      	bne.n	8000e00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 80a6 	beq.w	8000f86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e3e:	4b8b      	ldr	r3, [pc, #556]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10d      	bne.n	8000e66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b88      	ldr	r3, [pc, #544]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a87      	ldr	r2, [pc, #540]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b85      	ldr	r3, [pc, #532]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e62:	2301      	movs	r3, #1
 8000e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e66:	4b82      	ldr	r3, [pc, #520]	@ (8001070 <HAL_RCC_OscConfig+0x4c8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d118      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e72:	4b7f      	ldr	r3, [pc, #508]	@ (8001070 <HAL_RCC_OscConfig+0x4c8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a7e      	ldr	r2, [pc, #504]	@ (8001070 <HAL_RCC_OscConfig+0x4c8>)
 8000e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e7e:	f7ff fbcb 	bl	8000618 <HAL_GetTick>
 8000e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e84:	e008      	b.n	8000e98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e86:	f7ff fbc7 	bl	8000618 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b64      	cmp	r3, #100	@ 0x64
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e103      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e98:	4b75      	ldr	r3, [pc, #468]	@ (8001070 <HAL_RCC_OscConfig+0x4c8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0f0      	beq.n	8000e86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d106      	bne.n	8000eba <HAL_RCC_OscConfig+0x312>
 8000eac:	4b6f      	ldr	r3, [pc, #444]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	4a6e      	ldr	r2, [pc, #440]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6213      	str	r3, [r2, #32]
 8000eb8:	e02d      	b.n	8000f16 <HAL_RCC_OscConfig+0x36e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10c      	bne.n	8000edc <HAL_RCC_OscConfig+0x334>
 8000ec2:	4b6a      	ldr	r3, [pc, #424]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
 8000ec6:	4a69      	ldr	r2, [pc, #420]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000ec8:	f023 0301 	bic.w	r3, r3, #1
 8000ecc:	6213      	str	r3, [r2, #32]
 8000ece:	4b67      	ldr	r3, [pc, #412]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	4a66      	ldr	r2, [pc, #408]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	f023 0304 	bic.w	r3, r3, #4
 8000ed8:	6213      	str	r3, [r2, #32]
 8000eda:	e01c      	b.n	8000f16 <HAL_RCC_OscConfig+0x36e>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	2b05      	cmp	r3, #5
 8000ee2:	d10c      	bne.n	8000efe <HAL_RCC_OscConfig+0x356>
 8000ee4:	4b61      	ldr	r3, [pc, #388]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4a60      	ldr	r2, [pc, #384]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6213      	str	r3, [r2, #32]
 8000ef0:	4b5e      	ldr	r3, [pc, #376]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	4a5d      	ldr	r2, [pc, #372]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6213      	str	r3, [r2, #32]
 8000efc:	e00b      	b.n	8000f16 <HAL_RCC_OscConfig+0x36e>
 8000efe:	4b5b      	ldr	r3, [pc, #364]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	4a5a      	ldr	r2, [pc, #360]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	f023 0301 	bic.w	r3, r3, #1
 8000f08:	6213      	str	r3, [r2, #32]
 8000f0a:	4b58      	ldr	r3, [pc, #352]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	4a57      	ldr	r2, [pc, #348]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000f10:	f023 0304 	bic.w	r3, r3, #4
 8000f14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d015      	beq.n	8000f4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1e:	f7ff fb7b 	bl	8000618 <HAL_GetTick>
 8000f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f24:	e00a      	b.n	8000f3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f26:	f7ff fb77 	bl	8000618 <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e0b1      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3c:	4b4b      	ldr	r3, [pc, #300]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0ee      	beq.n	8000f26 <HAL_RCC_OscConfig+0x37e>
 8000f48:	e014      	b.n	8000f74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4a:	f7ff fb65 	bl	8000618 <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f50:	e00a      	b.n	8000f68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f52:	f7ff fb61 	bl	8000618 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e09b      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f68:	4b40      	ldr	r3, [pc, #256]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1ee      	bne.n	8000f52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d105      	bne.n	8000f86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a3b      	ldr	r2, [pc, #236]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8087 	beq.w	800109e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f90:	4b36      	ldr	r3, [pc, #216]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 030c 	and.w	r3, r3, #12
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d061      	beq.n	8001060 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d146      	bne.n	8001032 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fa4:	4b33      	ldr	r3, [pc, #204]	@ (8001074 <HAL_RCC_OscConfig+0x4cc>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000faa:	f7ff fb35 	bl	8000618 <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fb2:	f7ff fb31 	bl	8000618 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e06d      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc4:	4b29      	ldr	r3, [pc, #164]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f0      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fd8:	d108      	bne.n	8000fec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fda:	4b24      	ldr	r3, [pc, #144]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	4921      	ldr	r1, [pc, #132]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fec:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a19      	ldr	r1, [r3, #32]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	491b      	ldr	r1, [pc, #108]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001004:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <HAL_RCC_OscConfig+0x4cc>)
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fb05 	bl	8000618 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001012:	f7ff fb01 	bl	8000618 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e03d      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x46a>
 8001030:	e035      	b.n	800109e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <HAL_RCC_OscConfig+0x4cc>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff faee 	bl	8000618 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001040:	f7ff faea 	bl	8000618 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e026      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_RCC_OscConfig+0x4c4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f0      	bne.n	8001040 <HAL_RCC_OscConfig+0x498>
 800105e:	e01e      	b.n	800109e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d107      	bne.n	8001078 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e019      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
 800106c:	40021000 	.word	0x40021000
 8001070:	40007000 	.word	0x40007000
 8001074:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001078:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <HAL_RCC_OscConfig+0x500>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	429a      	cmp	r2, r3
 800108a:	d106      	bne.n	800109a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001096:	429a      	cmp	r2, r3
 8001098:	d001      	beq.n	800109e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0d0      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010c0:	4b6a      	ldr	r3, [pc, #424]	@ (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d910      	bls.n	80010f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ce:	4b67      	ldr	r3, [pc, #412]	@ (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 0207 	bic.w	r2, r3, #7
 80010d6:	4965      	ldr	r1, [pc, #404]	@ (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010de:	4b63      	ldr	r3, [pc, #396]	@ (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d001      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e0b8      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d020      	beq.n	800113e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001108:	4b59      	ldr	r3, [pc, #356]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a58      	ldr	r2, [pc, #352]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001120:	4b53      	ldr	r3, [pc, #332]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a52      	ldr	r2, [pc, #328]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800112a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800112c:	4b50      	ldr	r3, [pc, #320]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	494d      	ldr	r1, [pc, #308]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	4313      	orrs	r3, r2
 800113c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d040      	beq.n	80011cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d107      	bne.n	8001162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	4b47      	ldr	r3, [pc, #284]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d115      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e07f      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d107      	bne.n	800117a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800116a:	4b41      	ldr	r3, [pc, #260]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d109      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e073      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117a:	4b3d      	ldr	r3, [pc, #244]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e06b      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800118a:	4b39      	ldr	r3, [pc, #228]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f023 0203 	bic.w	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4936      	ldr	r1, [pc, #216]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800119c:	f7ff fa3c 	bl	8000618 <HAL_GetTick>
 80011a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a2:	e00a      	b.n	80011ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a4:	f7ff fa38 	bl	8000618 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e053      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 020c 	and.w	r2, r3, #12
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d1eb      	bne.n	80011a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011cc:	4b27      	ldr	r3, [pc, #156]	@ (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d210      	bcs.n	80011fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011da:	4b24      	ldr	r3, [pc, #144]	@ (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 0207 	bic.w	r2, r3, #7
 80011e2:	4922      	ldr	r1, [pc, #136]	@ (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d001      	beq.n	80011fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e032      	b.n	8001262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d008      	beq.n	800121a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001208:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4916      	ldr	r1, [pc, #88]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001226:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	490e      	ldr	r1, [pc, #56]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800123a:	f000 f821 	bl	8001280 <HAL_RCC_GetSysClockFreq>
 800123e:	4602      	mov	r2, r0
 8001240:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	490a      	ldr	r1, [pc, #40]	@ (8001274 <HAL_RCC_ClockConfig+0x1c8>)
 800124c:	5ccb      	ldrb	r3, [r1, r3]
 800124e:	fa22 f303 	lsr.w	r3, r2, r3
 8001252:	4a09      	ldr	r2, [pc, #36]	@ (8001278 <HAL_RCC_ClockConfig+0x1cc>)
 8001254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <HAL_RCC_ClockConfig+0x1d0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f99a 	bl	8000594 <HAL_InitTick>

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40022000 	.word	0x40022000
 8001270:	40021000 	.word	0x40021000
 8001274:	08004a54 	.word	0x08004a54
 8001278:	20000004 	.word	0x20000004
 800127c:	20000008 	.word	0x20000008

08001280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800129a:	4b1e      	ldr	r3, [pc, #120]	@ (8001314 <HAL_RCC_GetSysClockFreq+0x94>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d002      	beq.n	80012b0 <HAL_RCC_GetSysClockFreq+0x30>
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d003      	beq.n	80012b6 <HAL_RCC_GetSysClockFreq+0x36>
 80012ae:	e027      	b.n	8001300 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_RCC_GetSysClockFreq+0x98>)
 80012b2:	613b      	str	r3, [r7, #16]
      break;
 80012b4:	e027      	b.n	8001306 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	0c9b      	lsrs	r3, r3, #18
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	4a17      	ldr	r2, [pc, #92]	@ (800131c <HAL_RCC_GetSysClockFreq+0x9c>)
 80012c0:	5cd3      	ldrb	r3, [r2, r3]
 80012c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d010      	beq.n	80012f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <HAL_RCC_GetSysClockFreq+0x94>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	0c5b      	lsrs	r3, r3, #17
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	4a11      	ldr	r2, [pc, #68]	@ (8001320 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012da:	5cd3      	ldrb	r3, [r2, r3]
 80012dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001318 <HAL_RCC_GetSysClockFreq+0x98>)
 80012e2:	fb03 f202 	mul.w	r2, r3, r2
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	e004      	b.n	80012fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001324 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012f4:	fb02 f303 	mul.w	r3, r2, r3
 80012f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	613b      	str	r3, [r7, #16]
      break;
 80012fe:	e002      	b.n	8001306 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <HAL_RCC_GetSysClockFreq+0x98>)
 8001302:	613b      	str	r3, [r7, #16]
      break;
 8001304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001306:	693b      	ldr	r3, [r7, #16]
}
 8001308:	4618      	mov	r0, r3
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	007a1200 	.word	0x007a1200
 800131c:	08004a64 	.word	0x08004a64
 8001320:	08004a74 	.word	0x08004a74
 8001324:	003d0900 	.word	0x003d0900

08001328 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <RCC_Delay+0x34>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <RCC_Delay+0x38>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	0a5b      	lsrs	r3, r3, #9
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001344:	bf00      	nop
  }
  while (Delay --);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1e5a      	subs	r2, r3, #1
 800134a:	60fa      	str	r2, [r7, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f9      	bne.n	8001344 <RCC_Delay+0x1c>
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	20000004 	.word	0x20000004
 8001360:	10624dd3 	.word	0x10624dd3

08001364 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800136a:	f3ef 8305 	mrs	r3, IPSR
 800136e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001370:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001376:	f3ef 8310 	mrs	r3, PRIMASK
 800137a:	607b      	str	r3, [r7, #4]
  return(result);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d109      	bne.n	8001396 <osKernelInitialize+0x32>
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <osKernelInitialize+0x60>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d109      	bne.n	800139e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800138a:	f3ef 8311 	mrs	r3, BASEPRI
 800138e:	603b      	str	r3, [r7, #0]
  return(result);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001396:	f06f 0305 	mvn.w	r3, #5
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	e00c      	b.n	80013b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800139e:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <osKernelInitialize+0x60>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80013a6:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <osKernelInitialize+0x60>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e002      	b.n	80013b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80013b8:	68fb      	ldr	r3, [r7, #12]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	2000004c 	.word	0x2000004c

080013c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80013ce:	f3ef 8305 	mrs	r3, IPSR
 80013d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80013d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10f      	bne.n	80013fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013da:	f3ef 8310 	mrs	r3, PRIMASK
 80013de:	607b      	str	r3, [r7, #4]
  return(result);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d109      	bne.n	80013fa <osKernelStart+0x32>
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <osKernelStart+0x64>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d109      	bne.n	8001402 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80013ee:	f3ef 8311 	mrs	r3, BASEPRI
 80013f2:	603b      	str	r3, [r7, #0]
  return(result);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <osKernelStart+0x3a>
    stat = osErrorISR;
 80013fa:	f06f 0305 	mvn.w	r3, #5
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e00e      	b.n	8001420 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001402:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <osKernelStart+0x64>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d107      	bne.n	800141a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800140a:	4b08      	ldr	r3, [pc, #32]	@ (800142c <osKernelStart+0x64>)
 800140c:	2202      	movs	r2, #2
 800140e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001410:	f001 fd1e 	bl	8002e50 <vTaskStartScheduler>
      stat = osOK;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e002      	b.n	8001420 <osKernelStart+0x58>
    } else {
      stat = osError;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001420:	68fb      	ldr	r3, [r7, #12]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000004c 	.word	0x2000004c

08001430 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b092      	sub	sp, #72	@ 0x48
 8001434:	af04      	add	r7, sp, #16
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001440:	f3ef 8305 	mrs	r3, IPSR
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001448:	2b00      	cmp	r3, #0
 800144a:	f040 8094 	bne.w	8001576 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800144e:	f3ef 8310 	mrs	r3, PRIMASK
 8001452:	623b      	str	r3, [r7, #32]
  return(result);
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 808d 	bne.w	8001576 <osThreadNew+0x146>
 800145c:	4b48      	ldr	r3, [pc, #288]	@ (8001580 <osThreadNew+0x150>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d106      	bne.n	8001472 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001464:	f3ef 8311 	mrs	r3, BASEPRI
 8001468:	61fb      	str	r3, [r7, #28]
  return(result);
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	2b00      	cmp	r3, #0
 800146e:	f040 8082 	bne.w	8001576 <osThreadNew+0x146>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d07e      	beq.n	8001576 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800147c:	2318      	movs	r3, #24
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8001480:	2300      	movs	r3, #0
 8001482:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001484:	f107 031b 	add.w	r3, r7, #27
 8001488:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
 800148e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d045      	beq.n	8001522 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <osThreadNew+0x74>
        name = attr->name;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80014b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <osThreadNew+0x9a>
 80014b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ba:	2b38      	cmp	r3, #56	@ 0x38
 80014bc:	d805      	bhi.n	80014ca <osThreadNew+0x9a>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <osThreadNew+0x9e>
        return (NULL);
 80014ca:	2300      	movs	r3, #0
 80014cc:	e054      	b.n	8001578 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00e      	beq.n	8001504 <osThreadNew+0xd4>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b5b      	cmp	r3, #91	@ 0x5b
 80014ec:	d90a      	bls.n	8001504 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <osThreadNew+0xd4>
        mem = 1;
 80014fe:	2301      	movs	r3, #1
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001502:	e010      	b.n	8001526 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10c      	bne.n	8001526 <osThreadNew+0xf6>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d108      	bne.n	8001526 <osThreadNew+0xf6>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d104      	bne.n	8001526 <osThreadNew+0xf6>
          mem = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001520:	e001      	b.n	8001526 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8001526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001528:	2b01      	cmp	r3, #1
 800152a:	d110      	bne.n	800154e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001534:	9202      	str	r2, [sp, #8]
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001540:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f001 fab2 	bl	8002aac <xTaskCreateStatic>
 8001548:	4603      	mov	r3, r0
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	e013      	b.n	8001576 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800154e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d110      	bne.n	8001576 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001556:	b29a      	uxth	r2, r3
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f001 faff 	bl	8002b6a <xTaskCreate>
 800156c:	4603      	mov	r3, r0
 800156e:	2b01      	cmp	r3, #1
 8001570:	d001      	beq.n	8001576 <osThreadNew+0x146>
          hTask = NULL;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001576:	697b      	ldr	r3, [r7, #20]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3738      	adds	r7, #56	@ 0x38
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2000004c 	.word	0x2000004c

08001584 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800158c:	f3ef 8305 	mrs	r3, IPSR
 8001590:	613b      	str	r3, [r7, #16]
  return(result);
 8001592:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10f      	bne.n	80015b8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001598:	f3ef 8310 	mrs	r3, PRIMASK
 800159c:	60fb      	str	r3, [r7, #12]
  return(result);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d109      	bne.n	80015b8 <osDelay+0x34>
 80015a4:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <osDelay+0x58>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d109      	bne.n	80015c0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80015ac:	f3ef 8311 	mrs	r3, BASEPRI
 80015b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <osDelay+0x3c>
    stat = osErrorISR;
 80015b8:	f06f 0305 	mvn.w	r3, #5
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e007      	b.n	80015d0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f001 fc0a 	bl	8002de4 <vTaskDelay>
    }
  }

  return (stat);
 80015d0:	697b      	ldr	r3, [r7, #20]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000004c 	.word	0x2000004c

080015e0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	@ 0x30
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80015f0:	f3ef 8305 	mrs	r3, IPSR
 80015f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80015f6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f040 8086 	bne.w	800170a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015fe:	f3ef 8310 	mrs	r3, PRIMASK
 8001602:	617b      	str	r3, [r7, #20]
  return(result);
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d17f      	bne.n	800170a <osSemaphoreNew+0x12a>
 800160a:	4b42      	ldr	r3, [pc, #264]	@ (8001714 <osSemaphoreNew+0x134>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d105      	bne.n	800161e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001612:	f3ef 8311 	mrs	r3, BASEPRI
 8001616:	613b      	str	r3, [r7, #16]
  return(result);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d175      	bne.n	800170a <osSemaphoreNew+0x12a>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d072      	beq.n	800170a <osSemaphoreNew+0x12a>
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	429a      	cmp	r2, r3
 800162a:	d86e      	bhi.n	800170a <osSemaphoreNew+0x12a>
    mem = -1;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d015      	beq.n	8001664 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <osSemaphoreNew+0x6e>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b4f      	cmp	r3, #79	@ 0x4f
 8001646:	d902      	bls.n	800164e <osSemaphoreNew+0x6e>
        mem = 1;
 8001648:	2301      	movs	r3, #1
 800164a:	623b      	str	r3, [r7, #32]
 800164c:	e00c      	b.n	8001668 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d108      	bne.n	8001668 <osSemaphoreNew+0x88>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d104      	bne.n	8001668 <osSemaphoreNew+0x88>
          mem = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
 8001662:	e001      	b.n	8001668 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166e:	d04c      	beq.n	800170a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d128      	bne.n	80016c8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d10a      	bne.n	8001692 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2203      	movs	r2, #3
 8001682:	9200      	str	r2, [sp, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2001      	movs	r0, #1
 800168a:	f000 fa4f 	bl	8001b2c <xQueueGenericCreateStatic>
 800168e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001690:	e005      	b.n	800169e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8001692:	2203      	movs	r2, #3
 8001694:	2100      	movs	r1, #0
 8001696:	2001      	movs	r0, #1
 8001698:	f000 fac4 	bl	8001c24 <xQueueGenericCreate>
 800169c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800169e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d022      	beq.n	80016ea <osSemaphoreNew+0x10a>
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d01f      	beq.n	80016ea <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80016b2:	f000 fb87 	bl	8001dc4 <xQueueGenericSend>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d016      	beq.n	80016ea <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80016bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80016be:	f001 f823 	bl	8002708 <vQueueDelete>
            hSemaphore = NULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c6:	e010      	b.n	80016ea <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d108      	bne.n	80016e0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	461a      	mov	r2, r3
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 fb06 	bl	8001ce8 <xQueueCreateCountingSemaphoreStatic>
 80016dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80016de:	e004      	b.n	80016ea <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 fb39 	bl	8001d5a <xQueueCreateCountingSemaphore>
 80016e8:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00c      	beq.n	800170a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <osSemaphoreNew+0x11e>
          name = attr->name;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	61fb      	str	r3, [r7, #28]
 80016fc:	e001      	b.n	8001702 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8001702:	69f9      	ldr	r1, [r7, #28]
 8001704:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001706:	f001 f94b 	bl	80029a0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800170c:	4618      	mov	r0, r3
 800170e:	3728      	adds	r7, #40	@ 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	2000004c 	.word	0x2000004c

08001718 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d103      	bne.n	8001738 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8001730:	f06f 0303 	mvn.w	r3, #3
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	e04b      	b.n	80017d0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001738:	f3ef 8305 	mrs	r3, IPSR
 800173c:	617b      	str	r3, [r7, #20]
  return(result);
 800173e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10f      	bne.n	8001764 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001744:	f3ef 8310 	mrs	r3, PRIMASK
 8001748:	613b      	str	r3, [r7, #16]
  return(result);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d109      	bne.n	8001764 <osSemaphoreAcquire+0x4c>
 8001750:	4b22      	ldr	r3, [pc, #136]	@ (80017dc <osSemaphoreAcquire+0xc4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d128      	bne.n	80017aa <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001758:	f3ef 8311 	mrs	r3, BASEPRI
 800175c:	60fb      	str	r3, [r7, #12]
  return(result);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d022      	beq.n	80017aa <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800176a:	f06f 0303 	mvn.w	r3, #3
 800176e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001770:	e02d      	b.n	80017ce <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	461a      	mov	r2, r3
 800177c:	2100      	movs	r1, #0
 800177e:	69b8      	ldr	r0, [r7, #24]
 8001780:	f000 ff40 	bl	8002604 <xQueueReceiveFromISR>
 8001784:	4603      	mov	r3, r0
 8001786:	2b01      	cmp	r3, #1
 8001788:	d003      	beq.n	8001792 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800178a:	f06f 0302 	mvn.w	r3, #2
 800178e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001790:	e01d      	b.n	80017ce <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01a      	beq.n	80017ce <osSemaphoreAcquire+0xb6>
 8001798:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <osSemaphoreAcquire+0xc8>)
 800179a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f3bf 8f4f 	dsb	sy
 80017a4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80017a8:	e011      	b.n	80017ce <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80017aa:	6839      	ldr	r1, [r7, #0]
 80017ac:	69b8      	ldr	r0, [r7, #24]
 80017ae:	f000 fe19 	bl	80023e4 <xQueueSemaphoreTake>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d00b      	beq.n	80017d0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80017be:	f06f 0301 	mvn.w	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	e004      	b.n	80017d0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80017c6:	f06f 0302 	mvn.w	r3, #2
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	e000      	b.n	80017d0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80017ce:	bf00      	nop
      }
    }
  }

  return (stat);
 80017d0:	69fb      	ldr	r3, [r7, #28]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000004c 	.word	0x2000004c
 80017e0:	e000ed04 	.word	0xe000ed04

080017e4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d103      	bne.n	8001802 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80017fa:	f06f 0303 	mvn.w	r3, #3
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	e03e      	b.n	8001880 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001802:	f3ef 8305 	mrs	r3, IPSR
 8001806:	617b      	str	r3, [r7, #20]
  return(result);
 8001808:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10f      	bne.n	800182e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800180e:	f3ef 8310 	mrs	r3, PRIMASK
 8001812:	613b      	str	r3, [r7, #16]
  return(result);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <osSemaphoreRelease+0x4a>
 800181a:	4b1c      	ldr	r3, [pc, #112]	@ (800188c <osSemaphoreRelease+0xa8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d120      	bne.n	8001864 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001822:	f3ef 8311 	mrs	r3, BASEPRI
 8001826:	60fb      	str	r3, [r7, #12]
  return(result);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d01a      	beq.n	8001864 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	4619      	mov	r1, r3
 8001838:	69b8      	ldr	r0, [r7, #24]
 800183a:	f000 fc60 	bl	80020fe <xQueueGiveFromISR>
 800183e:	4603      	mov	r3, r0
 8001840:	2b01      	cmp	r3, #1
 8001842:	d003      	beq.n	800184c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8001844:	f06f 0302 	mvn.w	r3, #2
 8001848:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800184a:	e018      	b.n	800187e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d015      	beq.n	800187e <osSemaphoreRelease+0x9a>
 8001852:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <osSemaphoreRelease+0xac>)
 8001854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	f3bf 8f4f 	dsb	sy
 800185e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001862:	e00c      	b.n	800187e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001864:	2300      	movs	r3, #0
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	69b8      	ldr	r0, [r7, #24]
 800186c:	f000 faaa 	bl	8001dc4 <xQueueGenericSend>
 8001870:	4603      	mov	r3, r0
 8001872:	2b01      	cmp	r3, #1
 8001874:	d004      	beq.n	8001880 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8001876:	f06f 0302 	mvn.w	r3, #2
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	e000      	b.n	8001880 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800187e:	bf00      	nop
    }
  }

  return (stat);
 8001880:	69fb      	ldr	r3, [r7, #28]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3720      	adds	r7, #32
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2000004c 	.word	0x2000004c
 8001890:	e000ed04 	.word	0xe000ed04

08001894 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4a06      	ldr	r2, [pc, #24]	@ (80018bc <vApplicationGetIdleTaskMemory+0x28>)
 80018a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	4a05      	ldr	r2, [pc, #20]	@ (80018c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80018aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2280      	movs	r2, #128	@ 0x80
 80018b0:	601a      	str	r2, [r3, #0]
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	20000050 	.word	0x20000050
 80018c0:	200000ac 	.word	0x200000ac

080018c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4a07      	ldr	r2, [pc, #28]	@ (80018f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80018d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	4a06      	ldr	r2, [pc, #24]	@ (80018f4 <vApplicationGetTimerTaskMemory+0x30>)
 80018da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018e2:	601a      	str	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	200002ac 	.word	0x200002ac
 80018f4:	20000308 	.word	0x20000308

080018f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f103 0208 	add.w	r2, r3, #8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f103 0208 	add.w	r2, r3, #8
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f103 0208 	add.w	r2, r3, #8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800194e:	b480      	push	{r7}
 8001950:	b085      	sub	sp, #20
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	601a      	str	r2, [r3, #0]
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019aa:	d103      	bne.n	80019b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	e00c      	b.n	80019ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3308      	adds	r3, #8
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	e002      	b.n	80019c2 <vListInsert+0x2e>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d2f6      	bcs.n	80019bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	601a      	str	r2, [r3, #0]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6892      	ldr	r2, [r2, #8]
 8001a1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6852      	ldr	r2, [r2, #4]
 8001a24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d103      	bne.n	8001a38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	1e5a      	subs	r2, r3, #1
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
	...

08001a58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10b      	bne.n	8001a84 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a70:	f383 8811 	msr	BASEPRI, r3
 8001a74:	f3bf 8f6f 	isb	sy
 8001a78:	f3bf 8f4f 	dsb	sy
 8001a7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001a7e:	bf00      	nop
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001a84:	f002 fc3a 	bl	80042fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a90:	68f9      	ldr	r1, [r7, #12]
 8001a92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001a94:	fb01 f303 	mul.w	r3, r1, r3
 8001a98:	441a      	add	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	68f9      	ldr	r1, [r7, #12]
 8001ab8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	441a      	add	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	22ff      	movs	r2, #255	@ 0xff
 8001ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	22ff      	movs	r2, #255	@ 0xff
 8001ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d114      	bne.n	8001b04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d01a      	beq.n	8001b18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3310      	adds	r3, #16
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 fc44 	bl	8003374 <xTaskRemoveFromEventList>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d012      	beq.n	8001b18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001af2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <xQueueGenericReset+0xd0>)
 8001af4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	f3bf 8f4f 	dsb	sy
 8001afe:	f3bf 8f6f 	isb	sy
 8001b02:	e009      	b.n	8001b18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3310      	adds	r3, #16
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fef5 	bl	80018f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3324      	adds	r3, #36	@ 0x24
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fef0 	bl	80018f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001b18:	f002 fc20 	bl	800435c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001b1c:	2301      	movs	r3, #1
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000ed04 	.word	0xe000ed04

08001b2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08e      	sub	sp, #56	@ 0x38
 8001b30:	af02      	add	r7, sp, #8
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10b      	bne.n	8001b58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b44:	f383 8811 	msr	BASEPRI, r3
 8001b48:	f3bf 8f6f 	isb	sy
 8001b4c:	f3bf 8f4f 	dsb	sy
 8001b50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10b      	bne.n	8001b76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b62:	f383 8811 	msr	BASEPRI, r3
 8001b66:	f3bf 8f6f 	isb	sy
 8001b6a:	f3bf 8f4f 	dsb	sy
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	e7fd      	b.n	8001b72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <xQueueGenericCreateStatic+0x56>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <xQueueGenericCreateStatic+0x5a>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <xQueueGenericCreateStatic+0x5c>
 8001b86:	2300      	movs	r3, #0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10b      	bne.n	8001ba4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b90:	f383 8811 	msr	BASEPRI, r3
 8001b94:	f3bf 8f6f 	isb	sy
 8001b98:	f3bf 8f4f 	dsb	sy
 8001b9c:	623b      	str	r3, [r7, #32]
}
 8001b9e:	bf00      	nop
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d102      	bne.n	8001bb0 <xQueueGenericCreateStatic+0x84>
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <xQueueGenericCreateStatic+0x88>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <xQueueGenericCreateStatic+0x8a>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10b      	bne.n	8001bd2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bbe:	f383 8811 	msr	BASEPRI, r3
 8001bc2:	f3bf 8f6f 	isb	sy
 8001bc6:	f3bf 8f4f 	dsb	sy
 8001bca:	61fb      	str	r3, [r7, #28]
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	e7fd      	b.n	8001bce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001bd2:	2350      	movs	r3, #80	@ 0x50
 8001bd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b50      	cmp	r3, #80	@ 0x50
 8001bda:	d00b      	beq.n	8001bf4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001be0:	f383 8811 	msr	BASEPRI, r3
 8001be4:	f3bf 8f6f 	isb	sy
 8001be8:	f3bf 8f4f 	dsb	sy
 8001bec:	61bb      	str	r3, [r7, #24]
}
 8001bee:	bf00      	nop
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00d      	beq.n	8001c1a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c06:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f844 	bl	8001ca2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3730      	adds	r7, #48	@ 0x30
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	@ 0x28
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10b      	bne.n	8001c50 <xQueueGenericCreate+0x2c>
	__asm volatile
 8001c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c3c:	f383 8811 	msr	BASEPRI, r3
 8001c40:	f3bf 8f6f 	isb	sy
 8001c44:	f3bf 8f4f 	dsb	sy
 8001c48:	613b      	str	r3, [r7, #16]
}
 8001c4a:	bf00      	nop
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	e004      	b.n	8001c66 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3350      	adds	r3, #80	@ 0x50
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 fc48 	bl	8004500 <pvPortMalloc>
 8001c70:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00f      	beq.n	8001c98 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	3350      	adds	r3, #80	@ 0x50
 8001c7c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c86:	79fa      	ldrb	r2, [r7, #7]
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f805 	bl	8001ca2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001c98:	69bb      	ldr	r3, [r7, #24]
	}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d103      	bne.n	8001cbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e002      	b.n	8001cc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	69b8      	ldr	r0, [r7, #24]
 8001cd4:	f7ff fec0 	bl	8001a58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	78fa      	ldrb	r2, [r7, #3]
 8001cdc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10b      	bne.n	8001d12 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8001cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cfe:	f383 8811 	msr	BASEPRI, r3
 8001d02:	f3bf 8f6f 	isb	sy
 8001d06:	f3bf 8f4f 	dsb	sy
 8001d0a:	61bb      	str	r3, [r7, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	e7fd      	b.n	8001d0e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d90b      	bls.n	8001d32 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8001d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	617b      	str	r3, [r7, #20]
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	e7fd      	b.n	8001d2e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001d32:	2302      	movs	r3, #2
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7ff fef5 	bl	8001b2c <xQueueGenericCreateStatic>
 8001d42:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001d50:	69fb      	ldr	r3, [r7, #28]
	}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3720      	adds	r7, #32
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10b      	bne.n	8001d82 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8001d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d6e:	f383 8811 	msr	BASEPRI, r3
 8001d72:	f3bf 8f6f 	isb	sy
 8001d76:	f3bf 8f4f 	dsb	sy
 8001d7a:	613b      	str	r3, [r7, #16]
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	e7fd      	b.n	8001d7e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d90b      	bls.n	8001da2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8001d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d8e:	f383 8811 	msr	BASEPRI, r3
 8001d92:	f3bf 8f6f 	isb	sy
 8001d96:	f3bf 8f4f 	dsb	sy
 8001d9a:	60fb      	str	r3, [r7, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001da2:	2202      	movs	r2, #2
 8001da4:	2100      	movs	r1, #0
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ff3c 	bl	8001c24 <xQueueGenericCreate>
 8001dac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001dba:	697b      	ldr	r3, [r7, #20]
	}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08e      	sub	sp, #56	@ 0x38
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10b      	bne.n	8001df8 <xQueueGenericSend+0x34>
	__asm volatile
 8001de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001de4:	f383 8811 	msr	BASEPRI, r3
 8001de8:	f3bf 8f6f 	isb	sy
 8001dec:	f3bf 8f4f 	dsb	sy
 8001df0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001df2:	bf00      	nop
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <xQueueGenericSend+0x42>
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <xQueueGenericSend+0x46>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <xQueueGenericSend+0x48>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10b      	bne.n	8001e28 <xQueueGenericSend+0x64>
	__asm volatile
 8001e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e14:	f383 8811 	msr	BASEPRI, r3
 8001e18:	f3bf 8f6f 	isb	sy
 8001e1c:	f3bf 8f4f 	dsb	sy
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d103      	bne.n	8001e36 <xQueueGenericSend+0x72>
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <xQueueGenericSend+0x76>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <xQueueGenericSend+0x78>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10b      	bne.n	8001e58 <xQueueGenericSend+0x94>
	__asm volatile
 8001e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e44:	f383 8811 	msr	BASEPRI, r3
 8001e48:	f3bf 8f6f 	isb	sy
 8001e4c:	f3bf 8f4f 	dsb	sy
 8001e50:	623b      	str	r3, [r7, #32]
}
 8001e52:	bf00      	nop
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e58:	f001 fc50 	bl	80036fc <xTaskGetSchedulerState>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <xQueueGenericSend+0xa4>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <xQueueGenericSend+0xa8>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <xQueueGenericSend+0xaa>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10b      	bne.n	8001e8a <xQueueGenericSend+0xc6>
	__asm volatile
 8001e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e76:	f383 8811 	msr	BASEPRI, r3
 8001e7a:	f3bf 8f6f 	isb	sy
 8001e7e:	f3bf 8f4f 	dsb	sy
 8001e82:	61fb      	str	r3, [r7, #28]
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	e7fd      	b.n	8001e86 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e8a:	f002 fa37 	bl	80042fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d302      	bcc.n	8001ea0 <xQueueGenericSend+0xdc>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d129      	bne.n	8001ef4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	68b9      	ldr	r1, [r7, #8]
 8001ea4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ea6:	f000 fc6a 	bl	800277e <prvCopyDataToQueue>
 8001eaa:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d010      	beq.n	8001ed6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb6:	3324      	adds	r3, #36	@ 0x24
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 fa5b 	bl	8003374 <xTaskRemoveFromEventList>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8001fc4 <xQueueGenericSend+0x200>)
 8001ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	f3bf 8f4f 	dsb	sy
 8001ed0:	f3bf 8f6f 	isb	sy
 8001ed4:	e00a      	b.n	8001eec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d007      	beq.n	8001eec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001edc:	4b39      	ldr	r3, [pc, #228]	@ (8001fc4 <xQueueGenericSend+0x200>)
 8001ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	f3bf 8f4f 	dsb	sy
 8001ee8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001eec:	f002 fa36 	bl	800435c <vPortExitCritical>
				return pdPASS;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e063      	b.n	8001fbc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001efa:	f002 fa2f 	bl	800435c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e05c      	b.n	8001fbc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d106      	bne.n	8001f16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f001 fa95 	bl	800343c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f12:	2301      	movs	r3, #1
 8001f14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f16:	f002 fa21 	bl	800435c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f1a:	f001 f801 	bl	8002f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f1e:	f002 f9ed 	bl	80042fc <vPortEnterCritical>
 8001f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f28:	b25b      	sxtb	r3, r3
 8001f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2e:	d103      	bne.n	8001f38 <xQueueGenericSend+0x174>
 8001f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f3e:	b25b      	sxtb	r3, r3
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d103      	bne.n	8001f4e <xQueueGenericSend+0x18a>
 8001f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f4e:	f002 fa05 	bl	800435c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f52:	1d3a      	adds	r2, r7, #4
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f001 fa84 	bl	8003468 <xTaskCheckForTimeOut>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d124      	bne.n	8001fb0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f68:	f000 fd01 	bl	800296e <prvIsQueueFull>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d018      	beq.n	8001fa4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f74:	3310      	adds	r3, #16
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f001 f9a8 	bl	80032d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f82:	f000 fc8c 	bl	800289e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f86:	f000 ffd9 	bl	8002f3c <xTaskResumeAll>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f47f af7c 	bne.w	8001e8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001f92:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <xQueueGenericSend+0x200>)
 8001f94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	f3bf 8f4f 	dsb	sy
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	e772      	b.n	8001e8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001fa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fa6:	f000 fc7a 	bl	800289e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001faa:	f000 ffc7 	bl	8002f3c <xTaskResumeAll>
 8001fae:	e76c      	b.n	8001e8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001fb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fb2:	f000 fc74 	bl	800289e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001fb6:	f000 ffc1 	bl	8002f3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001fba:	2300      	movs	r3, #0
		}
	}
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3738      	adds	r7, #56	@ 0x38
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	e000ed04 	.word	0xe000ed04

08001fc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08e      	sub	sp, #56	@ 0x38
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10b      	bne.n	8001ff8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fe4:	f383 8811 	msr	BASEPRI, r3
 8001fe8:	f3bf 8f6f 	isb	sy
 8001fec:	f3bf 8f4f 	dsb	sy
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001ff2:	bf00      	nop
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d103      	bne.n	8002006 <xQueueGenericSendFromISR+0x3e>
 8001ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <xQueueGenericSendFromISR+0x42>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <xQueueGenericSendFromISR+0x44>
 800200a:	2300      	movs	r3, #0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10b      	bne.n	8002028 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	623b      	str	r3, [r7, #32]
}
 8002022:	bf00      	nop
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d103      	bne.n	8002036 <xQueueGenericSendFromISR+0x6e>
 800202e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <xQueueGenericSendFromISR+0x72>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <xQueueGenericSendFromISR+0x74>
 800203a:	2300      	movs	r3, #0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10b      	bne.n	8002058 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002044:	f383 8811 	msr	BASEPRI, r3
 8002048:	f3bf 8f6f 	isb	sy
 800204c:	f3bf 8f4f 	dsb	sy
 8002050:	61fb      	str	r3, [r7, #28]
}
 8002052:	bf00      	nop
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002058:	f002 fa12 	bl	8004480 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800205c:	f3ef 8211 	mrs	r2, BASEPRI
 8002060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	61ba      	str	r2, [r7, #24]
 8002072:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002074:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002076:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800207c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002080:	429a      	cmp	r2, r3
 8002082:	d302      	bcc.n	800208a <xQueueGenericSendFromISR+0xc2>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d12c      	bne.n	80020e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800208a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800208c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002090:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	68b9      	ldr	r1, [r7, #8]
 8002098:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800209a:	f000 fb70 	bl	800277e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800209e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80020a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a6:	d112      	bne.n	80020ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d016      	beq.n	80020de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b2:	3324      	adds	r3, #36	@ 0x24
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 f95d 	bl	8003374 <xTaskRemoveFromEventList>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00e      	beq.n	80020de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e007      	b.n	80020de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80020ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80020d2:	3301      	adds	r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	b25a      	sxtb	r2, r3
 80020d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80020de:	2301      	movs	r3, #1
 80020e0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80020e2:	e001      	b.n	80020e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80020e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80020f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80020f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3738      	adds	r7, #56	@ 0x38
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b08e      	sub	sp, #56	@ 0x38
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800210c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10b      	bne.n	800212a <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002116:	f383 8811 	msr	BASEPRI, r3
 800211a:	f3bf 8f6f 	isb	sy
 800211e:	f3bf 8f4f 	dsb	sy
 8002122:	623b      	str	r3, [r7, #32]
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	e7fd      	b.n	8002126 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800212a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002136:	f383 8811 	msr	BASEPRI, r3
 800213a:	f3bf 8f6f 	isb	sy
 800213e:	f3bf 8f4f 	dsb	sy
 8002142:	61fb      	str	r3, [r7, #28]
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	e7fd      	b.n	8002146 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800214a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <xQueueGiveFromISR+0x5c>
 8002152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <xQueueGiveFromISR+0x60>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <xQueueGiveFromISR+0x62>
 800215e:	2300      	movs	r3, #0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10b      	bne.n	800217c <xQueueGiveFromISR+0x7e>
	__asm volatile
 8002164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002168:	f383 8811 	msr	BASEPRI, r3
 800216c:	f3bf 8f6f 	isb	sy
 8002170:	f3bf 8f4f 	dsb	sy
 8002174:	61bb      	str	r3, [r7, #24]
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800217c:	f002 f980 	bl	8004480 <vPortValidateInterruptPriority>
	__asm volatile
 8002180:	f3ef 8211 	mrs	r2, BASEPRI
 8002184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002188:	f383 8811 	msr	BASEPRI, r3
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	617a      	str	r2, [r7, #20]
 8002196:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002198:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800219a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800219c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a0:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80021a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d22b      	bcs.n	8002204 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80021ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80021b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021bc:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80021be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c6:	d112      	bne.n	80021ee <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d016      	beq.n	80021fe <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d2:	3324      	adds	r3, #36	@ 0x24
 80021d4:	4618      	mov	r0, r3
 80021d6:	f001 f8cd 	bl	8003374 <xTaskRemoveFromEventList>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00e      	beq.n	80021fe <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e007      	b.n	80021fe <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80021ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021f2:	3301      	adds	r3, #1
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	b25a      	sxtb	r2, r3
 80021f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80021fe:	2301      	movs	r3, #1
 8002200:	637b      	str	r3, [r7, #52]	@ 0x34
 8002202:	e001      	b.n	8002208 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002204:	2300      	movs	r3, #0
 8002206:	637b      	str	r3, [r7, #52]	@ 0x34
 8002208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800220a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f383 8811 	msr	BASEPRI, r3
}
 8002212:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002216:	4618      	mov	r0, r3
 8002218:	3738      	adds	r7, #56	@ 0x38
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08c      	sub	sp, #48	@ 0x30
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800222c:	2300      	movs	r3, #0
 800222e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10b      	bne.n	8002252 <xQueueReceive+0x32>
	__asm volatile
 800223a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800223e:	f383 8811 	msr	BASEPRI, r3
 8002242:	f3bf 8f6f 	isb	sy
 8002246:	f3bf 8f4f 	dsb	sy
 800224a:	623b      	str	r3, [r7, #32]
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	e7fd      	b.n	800224e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d103      	bne.n	8002260 <xQueueReceive+0x40>
 8002258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <xQueueReceive+0x44>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <xQueueReceive+0x46>
 8002264:	2300      	movs	r3, #0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10b      	bne.n	8002282 <xQueueReceive+0x62>
	__asm volatile
 800226a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800226e:	f383 8811 	msr	BASEPRI, r3
 8002272:	f3bf 8f6f 	isb	sy
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	61fb      	str	r3, [r7, #28]
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	e7fd      	b.n	800227e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002282:	f001 fa3b 	bl	80036fc <xTaskGetSchedulerState>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <xQueueReceive+0x72>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <xQueueReceive+0x76>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <xQueueReceive+0x78>
 8002296:	2300      	movs	r3, #0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10b      	bne.n	80022b4 <xQueueReceive+0x94>
	__asm volatile
 800229c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022a0:	f383 8811 	msr	BASEPRI, r3
 80022a4:	f3bf 8f6f 	isb	sy
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	61bb      	str	r3, [r7, #24]
}
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80022b4:	f002 f822 	bl	80042fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01f      	beq.n	8002304 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022c8:	f000 fac3 	bl	8002852 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00f      	beq.n	80022fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022de:	3310      	adds	r3, #16
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 f847 	bl	8003374 <xTaskRemoveFromEventList>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80022ec:	4b3c      	ldr	r3, [pc, #240]	@ (80023e0 <xQueueReceive+0x1c0>)
 80022ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80022fc:	f002 f82e 	bl	800435c <vPortExitCritical>
				return pdPASS;
 8002300:	2301      	movs	r3, #1
 8002302:	e069      	b.n	80023d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d103      	bne.n	8002312 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800230a:	f002 f827 	bl	800435c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800230e:	2300      	movs	r3, #0
 8002310:	e062      	b.n	80023d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d106      	bne.n	8002326 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	4618      	mov	r0, r3
 800231e:	f001 f88d 	bl	800343c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002322:	2301      	movs	r3, #1
 8002324:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002326:	f002 f819 	bl	800435c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800232a:	f000 fdf9 	bl	8002f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800232e:	f001 ffe5 	bl	80042fc <vPortEnterCritical>
 8002332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002334:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002338:	b25b      	sxtb	r3, r3
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d103      	bne.n	8002348 <xQueueReceive+0x128>
 8002340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800234e:	b25b      	sxtb	r3, r3
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d103      	bne.n	800235e <xQueueReceive+0x13e>
 8002356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800235e:	f001 fffd 	bl	800435c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002362:	1d3a      	adds	r2, r7, #4
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f001 f87c 	bl	8003468 <xTaskCheckForTimeOut>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d123      	bne.n	80023be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002378:	f000 fae3 	bl	8002942 <prvIsQueueEmpty>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d017      	beq.n	80023b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002384:	3324      	adds	r3, #36	@ 0x24
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f000 ffa0 	bl	80032d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002390:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002392:	f000 fa84 	bl	800289e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002396:	f000 fdd1 	bl	8002f3c <xTaskResumeAll>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d189      	bne.n	80022b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80023a0:	4b0f      	ldr	r3, [pc, #60]	@ (80023e0 <xQueueReceive+0x1c0>)
 80023a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	e780      	b.n	80022b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80023b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023b4:	f000 fa73 	bl	800289e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023b8:	f000 fdc0 	bl	8002f3c <xTaskResumeAll>
 80023bc:	e77a      	b.n	80022b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80023be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023c0:	f000 fa6d 	bl	800289e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023c4:	f000 fdba 	bl	8002f3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023ca:	f000 faba 	bl	8002942 <prvIsQueueEmpty>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f43f af6f 	beq.w	80022b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80023d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3730      	adds	r7, #48	@ 0x30
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	e000ed04 	.word	0xe000ed04

080023e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08e      	sub	sp, #56	@ 0x38
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80023fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	623b      	str	r3, [r7, #32]
}
 8002412:	bf00      	nop
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	61fb      	str	r3, [r7, #28]
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002438:	f001 f960 	bl	80036fc <xTaskGetSchedulerState>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <xQueueSemaphoreTake+0x64>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <xQueueSemaphoreTake+0x68>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <xQueueSemaphoreTake+0x6a>
 800244c:	2300      	movs	r3, #0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10b      	bne.n	800246a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002456:	f383 8811 	msr	BASEPRI, r3
 800245a:	f3bf 8f6f 	isb	sy
 800245e:	f3bf 8f4f 	dsb	sy
 8002462:	61bb      	str	r3, [r7, #24]
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	e7fd      	b.n	8002466 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800246a:	f001 ff47 	bl	80042fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800246e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002472:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002476:	2b00      	cmp	r3, #0
 8002478:	d024      	beq.n	80024c4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800247a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002480:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d104      	bne.n	8002494 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800248a:	f001 fabb 	bl	8003a04 <pvTaskIncrementMutexHeldCount>
 800248e:	4602      	mov	r2, r0
 8002490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002492:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00f      	beq.n	80024bc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800249c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800249e:	3310      	adds	r3, #16
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 ff67 	bl	8003374 <xTaskRemoveFromEventList>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80024ac:	4b54      	ldr	r3, [pc, #336]	@ (8002600 <xQueueSemaphoreTake+0x21c>)
 80024ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80024bc:	f001 ff4e 	bl	800435c <vPortExitCritical>
				return pdPASS;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e098      	b.n	80025f6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d112      	bne.n	80024f0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80024ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00b      	beq.n	80024e8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	617b      	str	r3, [r7, #20]
}
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80024e8:	f001 ff38 	bl	800435c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e082      	b.n	80025f6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 ff9e 	bl	800343c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002500:	2301      	movs	r3, #1
 8002502:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002504:	f001 ff2a 	bl	800435c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002508:	f000 fd0a 	bl	8002f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800250c:	f001 fef6 	bl	80042fc <vPortEnterCritical>
 8002510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002512:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002516:	b25b      	sxtb	r3, r3
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d103      	bne.n	8002526 <xQueueSemaphoreTake+0x142>
 800251e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002528:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800252c:	b25b      	sxtb	r3, r3
 800252e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002532:	d103      	bne.n	800253c <xQueueSemaphoreTake+0x158>
 8002534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800253c:	f001 ff0e 	bl	800435c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002540:	463a      	mov	r2, r7
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f000 ff8d 	bl	8003468 <xTaskCheckForTimeOut>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d132      	bne.n	80025ba <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002554:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002556:	f000 f9f4 	bl	8002942 <prvIsQueueEmpty>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d026      	beq.n	80025ae <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d109      	bne.n	800257c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002568:	f001 fec8 	bl	80042fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800256c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4618      	mov	r0, r3
 8002572:	f001 f8e1 	bl	8003738 <xTaskPriorityInherit>
 8002576:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002578:	f001 fef0 	bl	800435c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800257c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257e:	3324      	adds	r3, #36	@ 0x24
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fea3 	bl	80032d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800258a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800258c:	f000 f987 	bl	800289e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002590:	f000 fcd4 	bl	8002f3c <xTaskResumeAll>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	f47f af67 	bne.w	800246a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800259c:	4b18      	ldr	r3, [pc, #96]	@ (8002600 <xQueueSemaphoreTake+0x21c>)
 800259e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	e75d      	b.n	800246a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80025ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025b0:	f000 f975 	bl	800289e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025b4:	f000 fcc2 	bl	8002f3c <xTaskResumeAll>
 80025b8:	e757      	b.n	800246a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80025ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025bc:	f000 f96f 	bl	800289e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025c0:	f000 fcbc 	bl	8002f3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025c6:	f000 f9bc 	bl	8002942 <prvIsQueueEmpty>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f43f af4c 	beq.w	800246a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80025d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00d      	beq.n	80025f4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80025d8:	f001 fe90 	bl	80042fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80025dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025de:	f000 f8b7 	bl	8002750 <prvGetDisinheritPriorityAfterTimeout>
 80025e2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80025e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025ea:	4618      	mov	r0, r3
 80025ec:	f001 f982 	bl	80038f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80025f0:	f001 feb4 	bl	800435c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80025f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3738      	adds	r7, #56	@ 0x38
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	e000ed04 	.word	0xe000ed04

08002604 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08e      	sub	sp, #56	@ 0x38
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10b      	bne.n	8002632 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800261a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	623b      	str	r3, [r7, #32]
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	e7fd      	b.n	800262e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d103      	bne.n	8002640 <xQueueReceiveFromISR+0x3c>
 8002638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <xQueueReceiveFromISR+0x40>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <xQueueReceiveFromISR+0x42>
 8002644:	2300      	movs	r3, #0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10b      	bne.n	8002662 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800264a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	61fb      	str	r3, [r7, #28]
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	e7fd      	b.n	800265e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002662:	f001 ff0d 	bl	8004480 <vPortValidateInterruptPriority>
	__asm volatile
 8002666:	f3ef 8211 	mrs	r2, BASEPRI
 800266a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800266e:	f383 8811 	msr	BASEPRI, r3
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	f3bf 8f4f 	dsb	sy
 800267a:	61ba      	str	r2, [r7, #24]
 800267c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800267e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002680:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002686:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268a:	2b00      	cmp	r3, #0
 800268c:	d02f      	beq.n	80026ee <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800268e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002690:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800269c:	f000 f8d9 	bl	8002852 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a2:	1e5a      	subs	r2, r3, #1
 80026a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80026a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d112      	bne.n	80026d8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026bc:	3310      	adds	r3, #16
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fe58 	bl	8003374 <xTaskRemoveFromEventList>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00e      	beq.n	80026e8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00b      	beq.n	80026e8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e007      	b.n	80026e8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80026d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026dc:	3301      	adds	r3, #1
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	b25a      	sxtb	r2, r3
 80026e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80026e8:	2301      	movs	r3, #1
 80026ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80026ec:	e001      	b.n	80026f2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80026f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f383 8811 	msr	BASEPRI, r3
}
 80026fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002700:	4618      	mov	r0, r3
 8002702:	3738      	adds	r7, #56	@ 0x38
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10b      	bne.n	8002732 <vQueueDelete+0x2a>
	__asm volatile
 800271a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	60bb      	str	r3, [r7, #8]
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	e7fd      	b.n	800272e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f95c 	bl	80029f0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f001 ffa4 	bl	8004690 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	e001      	b.n	8002772 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002772:	68fb      	ldr	r3, [r7, #12]
	}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002792:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10d      	bne.n	80027b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d14d      	bne.n	8002840 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 f833 	bl	8003814 <xTaskPriorityDisinherit>
 80027ae:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	e043      	b.n	8002840 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d119      	bne.n	80027f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6898      	ldr	r0, [r3, #8]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	461a      	mov	r2, r3
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	f002 f8a3 	bl	8004914 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	441a      	add	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d32b      	bcc.n	8002840 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	e026      	b.n	8002840 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	68d8      	ldr	r0, [r3, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	461a      	mov	r2, r3
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	f002 f889 	bl	8004914 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	425b      	negs	r3, r3
 800280c:	441a      	add	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d207      	bcs.n	800282e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	425b      	negs	r3, r3
 8002828:	441a      	add	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d105      	bne.n	8002840 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	3b01      	subs	r3, #1
 800283e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002848:	697b      	ldr	r3, [r7, #20]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	2b00      	cmp	r3, #0
 8002862:	d018      	beq.n	8002896 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	441a      	add	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	429a      	cmp	r2, r3
 800287c:	d303      	bcc.n	8002886 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68d9      	ldr	r1, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	461a      	mov	r2, r3
 8002890:	6838      	ldr	r0, [r7, #0]
 8002892:	f002 f83f 	bl	8004914 <memcpy>
	}
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80028a6:	f001 fd29 	bl	80042fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028b2:	e011      	b.n	80028d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d012      	beq.n	80028e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3324      	adds	r3, #36	@ 0x24
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fd57 	bl	8003374 <xTaskRemoveFromEventList>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80028cc:	f000 fe30 	bl	8003530 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	dce9      	bgt.n	80028b4 <prvUnlockQueue+0x16>
 80028e0:	e000      	b.n	80028e4 <prvUnlockQueue+0x46>
					break;
 80028e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	22ff      	movs	r2, #255	@ 0xff
 80028e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80028ec:	f001 fd36 	bl	800435c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80028f0:	f001 fd04 	bl	80042fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028fc:	e011      	b.n	8002922 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d012      	beq.n	800292c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3310      	adds	r3, #16
 800290a:	4618      	mov	r0, r3
 800290c:	f000 fd32 	bl	8003374 <xTaskRemoveFromEventList>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002916:	f000 fe0b 	bl	8003530 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800291a:	7bbb      	ldrb	r3, [r7, #14]
 800291c:	3b01      	subs	r3, #1
 800291e:	b2db      	uxtb	r3, r3
 8002920:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002922:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002926:	2b00      	cmp	r3, #0
 8002928:	dce9      	bgt.n	80028fe <prvUnlockQueue+0x60>
 800292a:	e000      	b.n	800292e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800292c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	22ff      	movs	r2, #255	@ 0xff
 8002932:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002936:	f001 fd11 	bl	800435c <vPortExitCritical>
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800294a:	f001 fcd7 	bl	80042fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002956:	2301      	movs	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e001      	b.n	8002960 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002960:	f001 fcfc 	bl	800435c <vPortExitCritical>

	return xReturn;
 8002964:	68fb      	ldr	r3, [r7, #12]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002976:	f001 fcc1 	bl	80042fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002982:	429a      	cmp	r2, r3
 8002984:	d102      	bne.n	800298c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002986:	2301      	movs	r3, #1
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	e001      	b.n	8002990 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800298c:	2300      	movs	r3, #0
 800298e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002990:	f001 fce4 	bl	800435c <vPortExitCritical>

	return xReturn;
 8002994:	68fb      	ldr	r3, [r7, #12]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	e014      	b.n	80029da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80029b0:	4a0e      	ldr	r2, [pc, #56]	@ (80029ec <vQueueAddToRegistry+0x4c>)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10b      	bne.n	80029d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80029bc:	490b      	ldr	r1, [pc, #44]	@ (80029ec <vQueueAddToRegistry+0x4c>)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80029c6:	4a09      	ldr	r2, [pc, #36]	@ (80029ec <vQueueAddToRegistry+0x4c>)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80029d2:	e006      	b.n	80029e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3301      	adds	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b07      	cmp	r3, #7
 80029de:	d9e7      	bls.n	80029b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	20000708 	.word	0x20000708

080029f0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	e016      	b.n	8002a2c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80029fe:	4a10      	ldr	r2, [pc, #64]	@ (8002a40 <vQueueUnregisterQueue+0x50>)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4413      	add	r3, r2
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d10b      	bne.n	8002a26 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a40 <vQueueUnregisterQueue+0x50>)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2100      	movs	r1, #0
 8002a14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8002a18:	4a09      	ldr	r2, [pc, #36]	@ (8002a40 <vQueueUnregisterQueue+0x50>)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	2200      	movs	r2, #0
 8002a22:	605a      	str	r2, [r3, #4]
				break;
 8002a24:	e006      	b.n	8002a34 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b07      	cmp	r3, #7
 8002a30:	d9e5      	bls.n	80029fe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8002a32:	bf00      	nop
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000708 	.word	0x20000708

08002a44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002a54:	f001 fc52 	bl	80042fc <vPortEnterCritical>
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a5e:	b25b      	sxtb	r3, r3
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d103      	bne.n	8002a6e <vQueueWaitForMessageRestricted+0x2a>
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a74:	b25b      	sxtb	r3, r3
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7a:	d103      	bne.n	8002a84 <vQueueWaitForMessageRestricted+0x40>
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a84:	f001 fc6a 	bl	800435c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d106      	bne.n	8002a9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	3324      	adds	r3, #36	@ 0x24
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fc3f 	bl	800331c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	f7ff fefd 	bl	800289e <prvUnlockQueue>
	}
 8002aa4:	bf00      	nop
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08e      	sub	sp, #56	@ 0x38
 8002ab0:	af04      	add	r7, sp, #16
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	623b      	str	r3, [r7, #32]
}
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	61fb      	str	r3, [r7, #28]
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	e7fd      	b.n	8002af2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002af6:	235c      	movs	r3, #92	@ 0x5c
 8002af8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b5c      	cmp	r3, #92	@ 0x5c
 8002afe:	d00b      	beq.n	8002b18 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b04:	f383 8811 	msr	BASEPRI, r3
 8002b08:	f3bf 8f6f 	isb	sy
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	61bb      	str	r3, [r7, #24]
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01e      	beq.n	8002b5c <xTaskCreateStatic+0xb0>
 8002b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01b      	beq.n	8002b5c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b26:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b2c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b30:	2202      	movs	r2, #2
 8002b32:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b36:	2300      	movs	r3, #0
 8002b38:	9303      	str	r3, [sp, #12]
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	9302      	str	r3, [sp, #8]
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f850 	bl	8002bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002b56:	f000 f8d5 	bl	8002d04 <prvAddNewTaskToReadyList>
 8002b5a:	e001      	b.n	8002b60 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b60:	697b      	ldr	r3, [r7, #20]
	}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3728      	adds	r7, #40	@ 0x28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b08c      	sub	sp, #48	@ 0x30
 8002b6e:	af04      	add	r7, sp, #16
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f001 fcbe 	bl	8004500 <pvPortMalloc>
 8002b84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00e      	beq.n	8002baa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002b8c:	205c      	movs	r0, #92	@ 0x5c
 8002b8e:	f001 fcb7 	bl	8004500 <pvPortMalloc>
 8002b92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ba0:	e005      	b.n	8002bae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ba2:	6978      	ldr	r0, [r7, #20]
 8002ba4:	f001 fd74 	bl	8004690 <vPortFree>
 8002ba8:	e001      	b.n	8002bae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d017      	beq.n	8002be4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bbc:	88fa      	ldrh	r2, [r7, #6]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	9303      	str	r3, [sp, #12]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	9302      	str	r3, [sp, #8]
 8002bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f80e 	bl	8002bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bd8:	69f8      	ldr	r0, [r7, #28]
 8002bda:	f000 f893 	bl	8002d04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002bde:	2301      	movs	r3, #1
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	e002      	b.n	8002bea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
 8002be8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002bea:	69bb      	ldr	r3, [r7, #24]
	}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3720      	adds	r7, #32
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	21a5      	movs	r1, #165	@ 0xa5
 8002c0e:	f001 fe55 	bl	80048bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f023 0307 	bic.w	r3, r3, #7
 8002c2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	617b      	str	r3, [r7, #20]
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	e7fd      	b.n	8002c4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	e012      	b.n	8002c7a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	4413      	add	r3, r2
 8002c5a:	7819      	ldrb	r1, [r3, #0]
 8002c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	3334      	adds	r3, #52	@ 0x34
 8002c64:	460a      	mov	r2, r1
 8002c66:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	3301      	adds	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	2b0f      	cmp	r3, #15
 8002c7e:	d9e9      	bls.n	8002c54 <prvInitialiseNewTask+0x60>
 8002c80:	e000      	b.n	8002c84 <prvInitialiseNewTask+0x90>
		{
			break;
 8002c82:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8e:	2b37      	cmp	r3, #55	@ 0x37
 8002c90:	d901      	bls.n	8002c96 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c92:	2337      	movs	r3, #55	@ 0x37
 8002c94:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ca0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002caa:	3304      	adds	r3, #4
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe fe42 	bl	8001936 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb4:	3318      	adds	r3, #24
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fe3d 	bl	8001936 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cd0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	68f9      	ldr	r1, [r7, #12]
 8002ce4:	69b8      	ldr	r0, [r7, #24]
 8002ce6:	f001 fa15 	bl	8004114 <pxPortInitialiseStack>
 8002cea:	4602      	mov	r2, r0
 8002cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cfa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cfc:	bf00      	nop
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d0c:	f001 faf6 	bl	80042fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d10:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc8 <prvAddNewTaskToReadyList+0xc4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	4a2c      	ldr	r2, [pc, #176]	@ (8002dc8 <prvAddNewTaskToReadyList+0xc4>)
 8002d18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002dcc <prvAddNewTaskToReadyList+0xc8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d22:	4a2a      	ldr	r2, [pc, #168]	@ (8002dcc <prvAddNewTaskToReadyList+0xc8>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d28:	4b27      	ldr	r3, [pc, #156]	@ (8002dc8 <prvAddNewTaskToReadyList+0xc4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d110      	bne.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d30:	f000 fc22 	bl	8003578 <prvInitialiseTaskLists>
 8002d34:	e00d      	b.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d36:	4b26      	ldr	r3, [pc, #152]	@ (8002dd0 <prvAddNewTaskToReadyList+0xcc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d3e:	4b23      	ldr	r3, [pc, #140]	@ (8002dcc <prvAddNewTaskToReadyList+0xc8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d802      	bhi.n	8002d52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002dcc <prvAddNewTaskToReadyList+0xc8>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d52:	4b20      	ldr	r3, [pc, #128]	@ (8002dd4 <prvAddNewTaskToReadyList+0xd0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	4a1e      	ldr	r2, [pc, #120]	@ (8002dd4 <prvAddNewTaskToReadyList+0xd0>)
 8002d5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd4 <prvAddNewTaskToReadyList+0xd0>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d68:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <prvAddNewTaskToReadyList+0xd4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d903      	bls.n	8002d78 <prvAddNewTaskToReadyList+0x74>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	4a18      	ldr	r2, [pc, #96]	@ (8002dd8 <prvAddNewTaskToReadyList+0xd4>)
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4a15      	ldr	r2, [pc, #84]	@ (8002ddc <prvAddNewTaskToReadyList+0xd8>)
 8002d86:	441a      	add	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f7fe fddd 	bl	800194e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d94:	f001 fae2 	bl	800435c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d98:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <prvAddNewTaskToReadyList+0xcc>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00e      	beq.n	8002dbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002da0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <prvAddNewTaskToReadyList+0xc8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d207      	bcs.n	8002dbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002dae:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <prvAddNewTaskToReadyList+0xdc>)
 8002db0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000c1c 	.word	0x20000c1c
 8002dcc:	20000748 	.word	0x20000748
 8002dd0:	20000c28 	.word	0x20000c28
 8002dd4:	20000c38 	.word	0x20000c38
 8002dd8:	20000c24 	.word	0x20000c24
 8002ddc:	2000074c 	.word	0x2000074c
 8002de0:	e000ed04 	.word	0xe000ed04

08002de4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d018      	beq.n	8002e28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002df6:	4b14      	ldr	r3, [pc, #80]	@ (8002e48 <vTaskDelay+0x64>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <vTaskDelay+0x32>
	__asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	60bb      	str	r3, [r7, #8]
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	e7fd      	b.n	8002e12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e16:	f000 f883 	bl	8002f20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fe05 	bl	8003a2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e22:	f000 f88b 	bl	8002f3c <xTaskResumeAll>
 8002e26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d107      	bne.n	8002e3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002e2e:	4b07      	ldr	r3, [pc, #28]	@ (8002e4c <vTaskDelay+0x68>)
 8002e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000c44 	.word	0x20000c44
 8002e4c:	e000ed04 	.word	0xe000ed04

08002e50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	@ 0x28
 8002e54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e5e:	463a      	mov	r2, r7
 8002e60:	1d39      	adds	r1, r7, #4
 8002e62:	f107 0308 	add.w	r3, r7, #8
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fe fd14 	bl	8001894 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e6c:	6839      	ldr	r1, [r7, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	9202      	str	r2, [sp, #8]
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	2300      	movs	r3, #0
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	460a      	mov	r2, r1
 8002e7e:	4922      	ldr	r1, [pc, #136]	@ (8002f08 <vTaskStartScheduler+0xb8>)
 8002e80:	4822      	ldr	r0, [pc, #136]	@ (8002f0c <vTaskStartScheduler+0xbc>)
 8002e82:	f7ff fe13 	bl	8002aac <xTaskCreateStatic>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4a21      	ldr	r2, [pc, #132]	@ (8002f10 <vTaskStartScheduler+0xc0>)
 8002e8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e8c:	4b20      	ldr	r3, [pc, #128]	@ (8002f10 <vTaskStartScheduler+0xc0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e94:	2301      	movs	r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e001      	b.n	8002e9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d102      	bne.n	8002eaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002ea4:	f000 fe16 	bl	8003ad4 <xTimerCreateTimerTask>
 8002ea8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d116      	bne.n	8002ede <vTaskStartScheduler+0x8e>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	613b      	str	r3, [r7, #16]
}
 8002ec2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002ec4:	4b13      	ldr	r3, [pc, #76]	@ (8002f14 <vTaskStartScheduler+0xc4>)
 8002ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002ecc:	4b12      	ldr	r3, [pc, #72]	@ (8002f18 <vTaskStartScheduler+0xc8>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002ed2:	4b12      	ldr	r3, [pc, #72]	@ (8002f1c <vTaskStartScheduler+0xcc>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ed8:	f001 f99e 	bl	8004218 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002edc:	e00f      	b.n	8002efe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d10b      	bne.n	8002efe <vTaskStartScheduler+0xae>
	__asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	60fb      	str	r3, [r7, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	e7fd      	b.n	8002efa <vTaskStartScheduler+0xaa>
}
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	0800499c 	.word	0x0800499c
 8002f0c:	08003549 	.word	0x08003549
 8002f10:	20000c40 	.word	0x20000c40
 8002f14:	20000c3c 	.word	0x20000c3c
 8002f18:	20000c28 	.word	0x20000c28
 8002f1c:	20000c20 	.word	0x20000c20

08002f20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002f24:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <vTaskSuspendAll+0x18>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	4a03      	ldr	r2, [pc, #12]	@ (8002f38 <vTaskSuspendAll+0x18>)
 8002f2c:	6013      	str	r3, [r2, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000c44 	.word	0x20000c44

08002f3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f4a:	4b42      	ldr	r3, [pc, #264]	@ (8003054 <xTaskResumeAll+0x118>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10b      	bne.n	8002f6a <xTaskResumeAll+0x2e>
	__asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	603b      	str	r3, [r7, #0]
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	e7fd      	b.n	8002f66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f6a:	f001 f9c7 	bl	80042fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f6e:	4b39      	ldr	r3, [pc, #228]	@ (8003054 <xTaskResumeAll+0x118>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	4a37      	ldr	r2, [pc, #220]	@ (8003054 <xTaskResumeAll+0x118>)
 8002f76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f78:	4b36      	ldr	r3, [pc, #216]	@ (8003054 <xTaskResumeAll+0x118>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d162      	bne.n	8003046 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f80:	4b35      	ldr	r3, [pc, #212]	@ (8003058 <xTaskResumeAll+0x11c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d05e      	beq.n	8003046 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f88:	e02f      	b.n	8002fea <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002f8a:	4b34      	ldr	r3, [pc, #208]	@ (800305c <xTaskResumeAll+0x120>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	3318      	adds	r3, #24
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fd34 	bl	8001a04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe fd2f 	bl	8001a04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002faa:	4b2d      	ldr	r3, [pc, #180]	@ (8003060 <xTaskResumeAll+0x124>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d903      	bls.n	8002fba <xTaskResumeAll+0x7e>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003060 <xTaskResumeAll+0x124>)
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4a27      	ldr	r2, [pc, #156]	@ (8003064 <xTaskResumeAll+0x128>)
 8002fc8:	441a      	add	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	f7fe fcbc 	bl	800194e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fda:	4b23      	ldr	r3, [pc, #140]	@ (8003068 <xTaskResumeAll+0x12c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d302      	bcc.n	8002fea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002fe4:	4b21      	ldr	r3, [pc, #132]	@ (800306c <xTaskResumeAll+0x130>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fea:	4b1c      	ldr	r3, [pc, #112]	@ (800305c <xTaskResumeAll+0x120>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1cb      	bne.n	8002f8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ff8:	f000 fb5c 	bl	80036b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8003070 <xTaskResumeAll+0x134>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d010      	beq.n	800302a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003008:	f000 f844 	bl	8003094 <xTaskIncrementTick>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003012:	4b16      	ldr	r3, [pc, #88]	@ (800306c <xTaskResumeAll+0x130>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f1      	bne.n	8003008 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003024:	4b12      	ldr	r3, [pc, #72]	@ (8003070 <xTaskResumeAll+0x134>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800302a:	4b10      	ldr	r3, [pc, #64]	@ (800306c <xTaskResumeAll+0x130>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003032:	2301      	movs	r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003036:	4b0f      	ldr	r3, [pc, #60]	@ (8003074 <xTaskResumeAll+0x138>)
 8003038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003046:	f001 f989 	bl	800435c <vPortExitCritical>

	return xAlreadyYielded;
 800304a:	68bb      	ldr	r3, [r7, #8]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20000c44 	.word	0x20000c44
 8003058:	20000c1c 	.word	0x20000c1c
 800305c:	20000bdc 	.word	0x20000bdc
 8003060:	20000c24 	.word	0x20000c24
 8003064:	2000074c 	.word	0x2000074c
 8003068:	20000748 	.word	0x20000748
 800306c:	20000c30 	.word	0x20000c30
 8003070:	20000c2c 	.word	0x20000c2c
 8003074:	e000ed04 	.word	0xe000ed04

08003078 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800307e:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <xTaskGetTickCount+0x18>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003084:	687b      	ldr	r3, [r7, #4]
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr
 8003090:	20000c20 	.word	0x20000c20

08003094 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800309e:	4b52      	ldr	r3, [pc, #328]	@ (80031e8 <xTaskIncrementTick+0x154>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 808f 	bne.w	80031c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030a8:	4b50      	ldr	r3, [pc, #320]	@ (80031ec <xTaskIncrementTick+0x158>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3301      	adds	r3, #1
 80030ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80030b0:	4a4e      	ldr	r2, [pc, #312]	@ (80031ec <xTaskIncrementTick+0x158>)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d121      	bne.n	8003100 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80030bc:	4b4c      	ldr	r3, [pc, #304]	@ (80031f0 <xTaskIncrementTick+0x15c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <xTaskIncrementTick+0x4a>
	__asm volatile
 80030c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	603b      	str	r3, [r7, #0]
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	e7fd      	b.n	80030da <xTaskIncrementTick+0x46>
 80030de:	4b44      	ldr	r3, [pc, #272]	@ (80031f0 <xTaskIncrementTick+0x15c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	4b43      	ldr	r3, [pc, #268]	@ (80031f4 <xTaskIncrementTick+0x160>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a41      	ldr	r2, [pc, #260]	@ (80031f0 <xTaskIncrementTick+0x15c>)
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4a41      	ldr	r2, [pc, #260]	@ (80031f4 <xTaskIncrementTick+0x160>)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b41      	ldr	r3, [pc, #260]	@ (80031f8 <xTaskIncrementTick+0x164>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3301      	adds	r3, #1
 80030f8:	4a3f      	ldr	r2, [pc, #252]	@ (80031f8 <xTaskIncrementTick+0x164>)
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	f000 fada 	bl	80036b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003100:	4b3e      	ldr	r3, [pc, #248]	@ (80031fc <xTaskIncrementTick+0x168>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	429a      	cmp	r2, r3
 8003108:	d34e      	bcc.n	80031a8 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800310a:	4b39      	ldr	r3, [pc, #228]	@ (80031f0 <xTaskIncrementTick+0x15c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <xTaskIncrementTick+0x84>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <xTaskIncrementTick+0x86>
 8003118:	2300      	movs	r3, #0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800311e:	4b37      	ldr	r3, [pc, #220]	@ (80031fc <xTaskIncrementTick+0x168>)
 8003120:	f04f 32ff 	mov.w	r2, #4294967295
 8003124:	601a      	str	r2, [r3, #0]
					break;
 8003126:	e03f      	b.n	80031a8 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003128:	4b31      	ldr	r3, [pc, #196]	@ (80031f0 <xTaskIncrementTick+0x15c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	d203      	bcs.n	8003148 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003140:	4a2e      	ldr	r2, [pc, #184]	@ (80031fc <xTaskIncrementTick+0x168>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6013      	str	r3, [r2, #0]
						break;
 8003146:	e02f      	b.n	80031a8 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	3304      	adds	r3, #4
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe fc59 	bl	8001a04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003156:	2b00      	cmp	r3, #0
 8003158:	d004      	beq.n	8003164 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	3318      	adds	r3, #24
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fc50 	bl	8001a04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003168:	4b25      	ldr	r3, [pc, #148]	@ (8003200 <xTaskIncrementTick+0x16c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d903      	bls.n	8003178 <xTaskIncrementTick+0xe4>
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003174:	4a22      	ldr	r2, [pc, #136]	@ (8003200 <xTaskIncrementTick+0x16c>)
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4a1f      	ldr	r2, [pc, #124]	@ (8003204 <xTaskIncrementTick+0x170>)
 8003186:	441a      	add	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3304      	adds	r3, #4
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f7fe fbdd 	bl	800194e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003198:	4b1b      	ldr	r3, [pc, #108]	@ (8003208 <xTaskIncrementTick+0x174>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319e:	429a      	cmp	r2, r3
 80031a0:	d3b3      	bcc.n	800310a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80031a2:	2301      	movs	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031a6:	e7b0      	b.n	800310a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031a8:	4b17      	ldr	r3, [pc, #92]	@ (8003208 <xTaskIncrementTick+0x174>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ae:	4915      	ldr	r1, [pc, #84]	@ (8003204 <xTaskIncrementTick+0x170>)
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d907      	bls.n	80031d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80031c0:	2301      	movs	r3, #1
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	e004      	b.n	80031d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80031c6:	4b11      	ldr	r3, [pc, #68]	@ (800320c <xTaskIncrementTick+0x178>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3301      	adds	r3, #1
 80031cc:	4a0f      	ldr	r2, [pc, #60]	@ (800320c <xTaskIncrementTick+0x178>)
 80031ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80031d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <xTaskIncrementTick+0x17c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80031d8:	2301      	movs	r3, #1
 80031da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80031dc:	697b      	ldr	r3, [r7, #20]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000c44 	.word	0x20000c44
 80031ec:	20000c20 	.word	0x20000c20
 80031f0:	20000bd4 	.word	0x20000bd4
 80031f4:	20000bd8 	.word	0x20000bd8
 80031f8:	20000c34 	.word	0x20000c34
 80031fc:	20000c3c 	.word	0x20000c3c
 8003200:	20000c24 	.word	0x20000c24
 8003204:	2000074c 	.word	0x2000074c
 8003208:	20000748 	.word	0x20000748
 800320c:	20000c2c 	.word	0x20000c2c
 8003210:	20000c30 	.word	0x20000c30

08003214 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800321a:	4b28      	ldr	r3, [pc, #160]	@ (80032bc <vTaskSwitchContext+0xa8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003222:	4b27      	ldr	r3, [pc, #156]	@ (80032c0 <vTaskSwitchContext+0xac>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003228:	e042      	b.n	80032b0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800322a:	4b25      	ldr	r3, [pc, #148]	@ (80032c0 <vTaskSwitchContext+0xac>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003230:	4b24      	ldr	r3, [pc, #144]	@ (80032c4 <vTaskSwitchContext+0xb0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	e011      	b.n	800325c <vTaskSwitchContext+0x48>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10b      	bne.n	8003256 <vTaskSwitchContext+0x42>
	__asm volatile
 800323e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	607b      	str	r3, [r7, #4]
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	e7fd      	b.n	8003252 <vTaskSwitchContext+0x3e>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3b01      	subs	r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	491a      	ldr	r1, [pc, #104]	@ (80032c8 <vTaskSwitchContext+0xb4>)
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0e3      	beq.n	8003238 <vTaskSwitchContext+0x24>
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4a13      	ldr	r2, [pc, #76]	@ (80032c8 <vTaskSwitchContext+0xb4>)
 800327c:	4413      	add	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3308      	adds	r3, #8
 8003292:	429a      	cmp	r2, r3
 8003294:	d104      	bne.n	80032a0 <vTaskSwitchContext+0x8c>
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	605a      	str	r2, [r3, #4]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4a09      	ldr	r2, [pc, #36]	@ (80032cc <vTaskSwitchContext+0xb8>)
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4a06      	ldr	r2, [pc, #24]	@ (80032c4 <vTaskSwitchContext+0xb0>)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6013      	str	r3, [r2, #0]
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000c44 	.word	0x20000c44
 80032c0:	20000c30 	.word	0x20000c30
 80032c4:	20000c24 	.word	0x20000c24
 80032c8:	2000074c 	.word	0x2000074c
 80032cc:	20000748 	.word	0x20000748

080032d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10b      	bne.n	80032f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	60fb      	str	r3, [r7, #12]
}
 80032f2:	bf00      	nop
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032f8:	4b07      	ldr	r3, [pc, #28]	@ (8003318 <vTaskPlaceOnEventList+0x48>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3318      	adds	r3, #24
 80032fe:	4619      	mov	r1, r3
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7fe fb47 	bl	8001994 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003306:	2101      	movs	r1, #1
 8003308:	6838      	ldr	r0, [r7, #0]
 800330a:	f000 fb8f 	bl	8003a2c <prvAddCurrentTaskToDelayedList>
}
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000748 	.word	0x20000748

0800331c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10b      	bne.n	8003346 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800332e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003332:	f383 8811 	msr	BASEPRI, r3
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	617b      	str	r3, [r7, #20]
}
 8003340:	bf00      	nop
 8003342:	bf00      	nop
 8003344:	e7fd      	b.n	8003342 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003346:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <vTaskPlaceOnEventListRestricted+0x54>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3318      	adds	r3, #24
 800334c:	4619      	mov	r1, r3
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f7fe fafd 	bl	800194e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800335a:	f04f 33ff 	mov.w	r3, #4294967295
 800335e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	68b8      	ldr	r0, [r7, #8]
 8003364:	f000 fb62 	bl	8003a2c <prvAddCurrentTaskToDelayedList>
	}
 8003368:	bf00      	nop
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000748 	.word	0x20000748

08003374 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	60fb      	str	r3, [r7, #12]
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	e7fd      	b.n	800339e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	3318      	adds	r3, #24
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fe fb2c 	bl	8001a04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003424 <xTaskRemoveFromEventList+0xb0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d11d      	bne.n	80033f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	3304      	adds	r3, #4
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe fb23 	bl	8001a04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c2:	4b19      	ldr	r3, [pc, #100]	@ (8003428 <xTaskRemoveFromEventList+0xb4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d903      	bls.n	80033d2 <xTaskRemoveFromEventList+0x5e>
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ce:	4a16      	ldr	r2, [pc, #88]	@ (8003428 <xTaskRemoveFromEventList+0xb4>)
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4a13      	ldr	r2, [pc, #76]	@ (800342c <xTaskRemoveFromEventList+0xb8>)
 80033e0:	441a      	add	r2, r3
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	3304      	adds	r3, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f7fe fab0 	bl	800194e <vListInsertEnd>
 80033ee:	e005      	b.n	80033fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	3318      	adds	r3, #24
 80033f4:	4619      	mov	r1, r3
 80033f6:	480e      	ldr	r0, [pc, #56]	@ (8003430 <xTaskRemoveFromEventList+0xbc>)
 80033f8:	f7fe faa9 	bl	800194e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003400:	4b0c      	ldr	r3, [pc, #48]	@ (8003434 <xTaskRemoveFromEventList+0xc0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003406:	429a      	cmp	r2, r3
 8003408:	d905      	bls.n	8003416 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800340a:	2301      	movs	r3, #1
 800340c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800340e:	4b0a      	ldr	r3, [pc, #40]	@ (8003438 <xTaskRemoveFromEventList+0xc4>)
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e001      	b.n	800341a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800341a:	697b      	ldr	r3, [r7, #20]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000c44 	.word	0x20000c44
 8003428:	20000c24 	.word	0x20000c24
 800342c:	2000074c 	.word	0x2000074c
 8003430:	20000bdc 	.word	0x20000bdc
 8003434:	20000748 	.word	0x20000748
 8003438:	20000c30 	.word	0x20000c30

0800343c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003444:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <vTaskInternalSetTimeOutState+0x24>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800344c:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <vTaskInternalSetTimeOutState+0x28>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	605a      	str	r2, [r3, #4]
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000c34 	.word	0x20000c34
 8003464:	20000c20 	.word	0x20000c20

08003468 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10b      	bne.n	8003490 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	613b      	str	r3, [r7, #16]
}
 800348a:	bf00      	nop
 800348c:	bf00      	nop
 800348e:	e7fd      	b.n	800348c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	60fb      	str	r3, [r7, #12]
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	e7fd      	b.n	80034aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80034ae:	f000 ff25 	bl	80042fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80034b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003528 <xTaskCheckForTimeOut+0xc0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ca:	d102      	bne.n	80034d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
 80034d0:	e023      	b.n	800351a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	4b15      	ldr	r3, [pc, #84]	@ (800352c <xTaskCheckForTimeOut+0xc4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d007      	beq.n	80034ee <xTaskCheckForTimeOut+0x86>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d302      	bcc.n	80034ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80034e8:	2301      	movs	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	e015      	b.n	800351a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d20b      	bcs.n	8003510 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	1ad2      	subs	r2, r2, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff ff99 	bl	800343c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	e004      	b.n	800351a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003516:	2301      	movs	r3, #1
 8003518:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800351a:	f000 ff1f 	bl	800435c <vPortExitCritical>

	return xReturn;
 800351e:	69fb      	ldr	r3, [r7, #28]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3720      	adds	r7, #32
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000c20 	.word	0x20000c20
 800352c:	20000c34 	.word	0x20000c34

08003530 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003534:	4b03      	ldr	r3, [pc, #12]	@ (8003544 <vTaskMissedYield+0x14>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]
}
 800353a:	bf00      	nop
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000c30 	.word	0x20000c30

08003548 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003550:	f000 f852 	bl	80035f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003554:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <prvIdleTask+0x28>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d9f9      	bls.n	8003550 <prvIdleTask+0x8>
			{
				taskYIELD();
 800355c:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <prvIdleTask+0x2c>)
 800355e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800356c:	e7f0      	b.n	8003550 <prvIdleTask+0x8>
 800356e:	bf00      	nop
 8003570:	2000074c 	.word	0x2000074c
 8003574:	e000ed04 	.word	0xe000ed04

08003578 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800357e:	2300      	movs	r3, #0
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	e00c      	b.n	800359e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4a12      	ldr	r2, [pc, #72]	@ (80035d8 <prvInitialiseTaskLists+0x60>)
 8003590:	4413      	add	r3, r2
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe f9b0 	bl	80018f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3301      	adds	r3, #1
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b37      	cmp	r3, #55	@ 0x37
 80035a2:	d9ef      	bls.n	8003584 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80035a4:	480d      	ldr	r0, [pc, #52]	@ (80035dc <prvInitialiseTaskLists+0x64>)
 80035a6:	f7fe f9a7 	bl	80018f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035aa:	480d      	ldr	r0, [pc, #52]	@ (80035e0 <prvInitialiseTaskLists+0x68>)
 80035ac:	f7fe f9a4 	bl	80018f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035b0:	480c      	ldr	r0, [pc, #48]	@ (80035e4 <prvInitialiseTaskLists+0x6c>)
 80035b2:	f7fe f9a1 	bl	80018f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035b6:	480c      	ldr	r0, [pc, #48]	@ (80035e8 <prvInitialiseTaskLists+0x70>)
 80035b8:	f7fe f99e 	bl	80018f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80035bc:	480b      	ldr	r0, [pc, #44]	@ (80035ec <prvInitialiseTaskLists+0x74>)
 80035be:	f7fe f99b 	bl	80018f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035c2:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <prvInitialiseTaskLists+0x78>)
 80035c4:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <prvInitialiseTaskLists+0x64>)
 80035c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035c8:	4b0a      	ldr	r3, [pc, #40]	@ (80035f4 <prvInitialiseTaskLists+0x7c>)
 80035ca:	4a05      	ldr	r2, [pc, #20]	@ (80035e0 <prvInitialiseTaskLists+0x68>)
 80035cc:	601a      	str	r2, [r3, #0]
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	2000074c 	.word	0x2000074c
 80035dc:	20000bac 	.word	0x20000bac
 80035e0:	20000bc0 	.word	0x20000bc0
 80035e4:	20000bdc 	.word	0x20000bdc
 80035e8:	20000bf0 	.word	0x20000bf0
 80035ec:	20000c08 	.word	0x20000c08
 80035f0:	20000bd4 	.word	0x20000bd4
 80035f4:	20000bd8 	.word	0x20000bd8

080035f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035fe:	e019      	b.n	8003634 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003600:	f000 fe7c 	bl	80042fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003604:	4b10      	ldr	r3, [pc, #64]	@ (8003648 <prvCheckTasksWaitingTermination+0x50>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe f9f7 	bl	8001a04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003616:	4b0d      	ldr	r3, [pc, #52]	@ (800364c <prvCheckTasksWaitingTermination+0x54>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3b01      	subs	r3, #1
 800361c:	4a0b      	ldr	r2, [pc, #44]	@ (800364c <prvCheckTasksWaitingTermination+0x54>)
 800361e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003620:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <prvCheckTasksWaitingTermination+0x58>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3b01      	subs	r3, #1
 8003626:	4a0a      	ldr	r2, [pc, #40]	@ (8003650 <prvCheckTasksWaitingTermination+0x58>)
 8003628:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800362a:	f000 fe97 	bl	800435c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f810 	bl	8003654 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003634:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <prvCheckTasksWaitingTermination+0x58>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1e1      	bne.n	8003600 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800363c:	bf00      	nop
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000bf0 	.word	0x20000bf0
 800364c:	20000c1c 	.word	0x20000c1c
 8003650:	20000c04 	.word	0x20000c04

08003654 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003662:	2b00      	cmp	r3, #0
 8003664:	d108      	bne.n	8003678 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	4618      	mov	r0, r3
 800366c:	f001 f810 	bl	8004690 <vPortFree>
				vPortFree( pxTCB );
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f001 f80d 	bl	8004690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003676:	e019      	b.n	80036ac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800367e:	2b01      	cmp	r3, #1
 8003680:	d103      	bne.n	800368a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f001 f804 	bl	8004690 <vPortFree>
	}
 8003688:	e010      	b.n	80036ac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003690:	2b02      	cmp	r3, #2
 8003692:	d00b      	beq.n	80036ac <prvDeleteTCB+0x58>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	60fb      	str	r3, [r7, #12]
}
 80036a6:	bf00      	nop
 80036a8:	bf00      	nop
 80036aa:	e7fd      	b.n	80036a8 <prvDeleteTCB+0x54>
	}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ba:	4b0e      	ldr	r3, [pc, #56]	@ (80036f4 <prvResetNextTaskUnblockTime+0x40>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <prvResetNextTaskUnblockTime+0x14>
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <prvResetNextTaskUnblockTime+0x16>
 80036c8:	2300      	movs	r3, #0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d004      	beq.n	80036d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036ce:	4b0a      	ldr	r3, [pc, #40]	@ (80036f8 <prvResetNextTaskUnblockTime+0x44>)
 80036d0:	f04f 32ff 	mov.w	r2, #4294967295
 80036d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80036d6:	e008      	b.n	80036ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036d8:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <prvResetNextTaskUnblockTime+0x40>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4a04      	ldr	r2, [pc, #16]	@ (80036f8 <prvResetNextTaskUnblockTime+0x44>)
 80036e8:	6013      	str	r3, [r2, #0]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr
 80036f4:	20000bd4 	.word	0x20000bd4
 80036f8:	20000c3c 	.word	0x20000c3c

080036fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003702:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <xTaskGetSchedulerState+0x34>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d102      	bne.n	8003710 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800370a:	2301      	movs	r3, #1
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	e008      	b.n	8003722 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <xTaskGetSchedulerState+0x38>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d102      	bne.n	800371e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003718:	2302      	movs	r3, #2
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	e001      	b.n	8003722 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800371e:	2300      	movs	r3, #0
 8003720:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003722:	687b      	ldr	r3, [r7, #4]
	}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000c28 	.word	0x20000c28
 8003734:	20000c44 	.word	0x20000c44

08003738 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d056      	beq.n	80037fc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003752:	4b2d      	ldr	r3, [pc, #180]	@ (8003808 <xTaskPriorityInherit+0xd0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	429a      	cmp	r2, r3
 800375a:	d246      	bcs.n	80037ea <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	2b00      	cmp	r3, #0
 8003762:	db06      	blt.n	8003772 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003764:	4b28      	ldr	r3, [pc, #160]	@ (8003808 <xTaskPriorityInherit+0xd0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6959      	ldr	r1, [r3, #20]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4a22      	ldr	r2, [pc, #136]	@ (800380c <xTaskPriorityInherit+0xd4>)
 8003784:	4413      	add	r3, r2
 8003786:	4299      	cmp	r1, r3
 8003788:	d101      	bne.n	800378e <xTaskPriorityInherit+0x56>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <xTaskPriorityInherit+0x58>
 800378e:	2300      	movs	r3, #0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d022      	beq.n	80037da <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	3304      	adds	r3, #4
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe f933 	bl	8001a04 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800379e:	4b1a      	ldr	r3, [pc, #104]	@ (8003808 <xTaskPriorityInherit+0xd0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ac:	4b18      	ldr	r3, [pc, #96]	@ (8003810 <xTaskPriorityInherit+0xd8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d903      	bls.n	80037bc <xTaskPriorityInherit+0x84>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b8:	4a15      	ldr	r2, [pc, #84]	@ (8003810 <xTaskPriorityInherit+0xd8>)
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4a10      	ldr	r2, [pc, #64]	@ (800380c <xTaskPriorityInherit+0xd4>)
 80037ca:	441a      	add	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f7fe f8bb 	bl	800194e <vListInsertEnd>
 80037d8:	e004      	b.n	80037e4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80037da:	4b0b      	ldr	r3, [pc, #44]	@ (8003808 <xTaskPriorityInherit+0xd0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80037e4:	2301      	movs	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	e008      	b.n	80037fc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037ee:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <xTaskPriorityInherit+0xd0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d201      	bcs.n	80037fc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80037f8:	2301      	movs	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80037fc:	68fb      	ldr	r3, [r7, #12]
	}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000748 	.word	0x20000748
 800380c:	2000074c 	.word	0x2000074c
 8003810:	20000c24 	.word	0x20000c24

08003814 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d058      	beq.n	80038dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800382a:	4b2f      	ldr	r3, [pc, #188]	@ (80038e8 <xTaskPriorityDisinherit+0xd4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	429a      	cmp	r2, r3
 8003832:	d00b      	beq.n	800384c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	60fb      	str	r3, [r7, #12]
}
 8003846:	bf00      	nop
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	60bb      	str	r3, [r7, #8]
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003870:	1e5a      	subs	r2, r3, #1
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387e:	429a      	cmp	r2, r3
 8003880:	d02c      	beq.n	80038dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003886:	2b00      	cmp	r3, #0
 8003888:	d128      	bne.n	80038dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	3304      	adds	r3, #4
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe f8b8 	bl	8001a04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ac:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <xTaskPriorityDisinherit+0xd8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d903      	bls.n	80038bc <xTaskPriorityDisinherit+0xa8>
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	4a0c      	ldr	r2, [pc, #48]	@ (80038ec <xTaskPriorityDisinherit+0xd8>)
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4a09      	ldr	r2, [pc, #36]	@ (80038f0 <xTaskPriorityDisinherit+0xdc>)
 80038ca:	441a      	add	r2, r3
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	3304      	adds	r3, #4
 80038d0:	4619      	mov	r1, r3
 80038d2:	4610      	mov	r0, r2
 80038d4:	f7fe f83b 	bl	800194e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80038d8:	2301      	movs	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038dc:	697b      	ldr	r3, [r7, #20]
	}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000748 	.word	0x20000748
 80038ec:	20000c24 	.word	0x20000c24
 80038f0:	2000074c 	.word	0x2000074c

080038f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003902:	2301      	movs	r3, #1
 8003904:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d071      	beq.n	80039f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10b      	bne.n	800392c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	60fb      	str	r3, [r7, #12]
}
 8003926:	bf00      	nop
 8003928:	bf00      	nop
 800392a:	e7fd      	b.n	8003928 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d902      	bls.n	800393c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	e002      	b.n	8003942 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003940:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	429a      	cmp	r2, r3
 800394a:	d051      	beq.n	80039f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	429a      	cmp	r2, r3
 8003954:	d14c      	bne.n	80039f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003956:	4b28      	ldr	r3, [pc, #160]	@ (80039f8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	429a      	cmp	r2, r3
 800395e:	d10b      	bne.n	8003978 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	60bb      	str	r3, [r7, #8]
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	db04      	blt.n	8003996 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	6959      	ldr	r1, [r3, #20]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4a15      	ldr	r2, [pc, #84]	@ (80039fc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80039a6:	4413      	add	r3, r2
 80039a8:	4299      	cmp	r1, r3
 80039aa:	d101      	bne.n	80039b0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80039b0:	2300      	movs	r3, #0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01c      	beq.n	80039f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	3304      	adds	r3, #4
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe f822 	bl	8001a04 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003a00 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d903      	bls.n	80039d4 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003a00 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4a06      	ldr	r2, [pc, #24]	@ (80039fc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80039e2:	441a      	add	r2, r3
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f7fd ffaf 	bl	800194e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039f0:	bf00      	nop
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000748 	.word	0x20000748
 80039fc:	2000074c 	.word	0x2000074c
 8003a00:	20000c24 	.word	0x20000c24

08003a04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003a08:	4b07      	ldr	r3, [pc, #28]	@ (8003a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003a10:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a16:	3201      	adds	r2, #1
 8003a18:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8003a1a:	4b03      	ldr	r3, [pc, #12]	@ (8003a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
	}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000748 	.word	0x20000748

08003a2c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a36:	4b21      	ldr	r3, [pc, #132]	@ (8003abc <prvAddCurrentTaskToDelayedList+0x90>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a3c:	4b20      	ldr	r3, [pc, #128]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3304      	adds	r3, #4
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fd ffde 	bl	8001a04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d10a      	bne.n	8003a66 <prvAddCurrentTaskToDelayedList+0x3a>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a56:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	4819      	ldr	r0, [pc, #100]	@ (8003ac4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a60:	f7fd ff75 	bl	800194e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a64:	e026      	b.n	8003ab4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a6e:	4b14      	ldr	r3, [pc, #80]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d209      	bcs.n	8003a92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a7e:	4b12      	ldr	r3, [pc, #72]	@ (8003ac8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3304      	adds	r3, #4
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	f7fd ff82 	bl	8001994 <vListInsert>
}
 8003a90:	e010      	b.n	8003ab4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a92:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	f7fd ff78 	bl	8001994 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d202      	bcs.n	8003ab4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003aae:	4a08      	ldr	r2, [pc, #32]	@ (8003ad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6013      	str	r3, [r2, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20000c20 	.word	0x20000c20
 8003ac0:	20000748 	.word	0x20000748
 8003ac4:	20000c08 	.word	0x20000c08
 8003ac8:	20000bd8 	.word	0x20000bd8
 8003acc:	20000bd4 	.word	0x20000bd4
 8003ad0:	20000c3c 	.word	0x20000c3c

08003ad4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	@ 0x28
 8003ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ade:	f000 fad9 	bl	8004094 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b58 <xTimerCreateTimerTask+0x84>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d021      	beq.n	8003b2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003af2:	1d3a      	adds	r2, r7, #4
 8003af4:	f107 0108 	add.w	r1, r7, #8
 8003af8:	f107 030c 	add.w	r3, r7, #12
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fd fee1 	bl	80018c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	9202      	str	r2, [sp, #8]
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2300      	movs	r3, #0
 8003b12:	460a      	mov	r2, r1
 8003b14:	4911      	ldr	r1, [pc, #68]	@ (8003b5c <xTimerCreateTimerTask+0x88>)
 8003b16:	4812      	ldr	r0, [pc, #72]	@ (8003b60 <xTimerCreateTimerTask+0x8c>)
 8003b18:	f7fe ffc8 	bl	8002aac <xTaskCreateStatic>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4a11      	ldr	r2, [pc, #68]	@ (8003b64 <xTimerCreateTimerTask+0x90>)
 8003b20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b22:	4b10      	ldr	r3, [pc, #64]	@ (8003b64 <xTimerCreateTimerTask+0x90>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10b      	bne.n	8003b4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	613b      	str	r3, [r7, #16]
}
 8003b46:	bf00      	nop
 8003b48:	bf00      	nop
 8003b4a:	e7fd      	b.n	8003b48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b4c:	697b      	ldr	r3, [r7, #20]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000c78 	.word	0x20000c78
 8003b5c:	080049a4 	.word	0x080049a4
 8003b60:	08003c89 	.word	0x08003c89
 8003b64:	20000c7c 	.word	0x20000c7c

08003b68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	@ 0x28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <xTimerGenericCommand+0x30>
	__asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	623b      	str	r3, [r7, #32]
}
 8003b92:	bf00      	nop
 8003b94:	bf00      	nop
 8003b96:	e7fd      	b.n	8003b94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b98:	4b19      	ldr	r3, [pc, #100]	@ (8003c00 <xTimerGenericCommand+0x98>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d02a      	beq.n	8003bf6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b05      	cmp	r3, #5
 8003bb0:	dc18      	bgt.n	8003be4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003bb2:	f7ff fda3 	bl	80036fc <xTaskGetSchedulerState>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d109      	bne.n	8003bd0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003bbc:	4b10      	ldr	r3, [pc, #64]	@ (8003c00 <xTimerGenericCommand+0x98>)
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	f107 0110 	add.w	r1, r7, #16
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bc8:	f7fe f8fc 	bl	8001dc4 <xQueueGenericSend>
 8003bcc:	6278      	str	r0, [r7, #36]	@ 0x24
 8003bce:	e012      	b.n	8003bf6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <xTimerGenericCommand+0x98>)
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	f107 0110 	add.w	r1, r7, #16
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f7fe f8f2 	bl	8001dc4 <xQueueGenericSend>
 8003be0:	6278      	str	r0, [r7, #36]	@ 0x24
 8003be2:	e008      	b.n	8003bf6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003be4:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <xTimerGenericCommand+0x98>)
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	f107 0110 	add.w	r1, r7, #16
 8003bec:	2300      	movs	r3, #0
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	f7fe f9ea 	bl	8001fc8 <xQueueGenericSendFromISR>
 8003bf4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3728      	adds	r7, #40	@ 0x28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20000c78 	.word	0x20000c78

08003c04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c84 <prvProcessExpiredTimer+0x80>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fd fef1 	bl	8001a04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d123      	bne.n	8003c72 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	18d1      	adds	r1, r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	6978      	ldr	r0, [r7, #20]
 8003c38:	f000 f8cc 	bl	8003dd4 <prvInsertTimerInActiveList>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d017      	beq.n	8003c72 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c42:	2300      	movs	r3, #0
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	2300      	movs	r3, #0
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	6978      	ldr	r0, [r7, #20]
 8003c4e:	f7ff ff8b 	bl	8003b68 <xTimerGenericCommand>
 8003c52:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10b      	bne.n	8003c72 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	60fb      	str	r3, [r7, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	e7fd      	b.n	8003c6e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	6978      	ldr	r0, [r7, #20]
 8003c78:	4798      	blx	r3
}
 8003c7a:	bf00      	nop
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000c70 	.word	0x20000c70

08003c88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c90:	f107 0308 	add.w	r3, r7, #8
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 f859 	bl	8003d4c <prvGetNextExpireTime>
 8003c9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f805 	bl	8003cb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003ca6:	f000 f8d7 	bl	8003e58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003caa:	bf00      	nop
 8003cac:	e7f0      	b.n	8003c90 <prvTimerTask+0x8>
	...

08003cb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003cba:	f7ff f931 	bl	8002f20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cbe:	f107 0308 	add.w	r3, r7, #8
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f866 	bl	8003d94 <prvSampleTimeNow>
 8003cc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d130      	bne.n	8003d32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <prvProcessTimerOrBlockTask+0x3c>
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d806      	bhi.n	8003cec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003cde:	f7ff f92d 	bl	8002f3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ce2:	68f9      	ldr	r1, [r7, #12]
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff ff8d 	bl	8003c04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003cea:	e024      	b.n	8003d36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003cf2:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <prvProcessTimerOrBlockTask+0x90>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d04:	4b0f      	ldr	r3, [pc, #60]	@ (8003d44 <prvProcessTimerOrBlockTask+0x94>)
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	4619      	mov	r1, r3
 8003d12:	f7fe fe97 	bl	8002a44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d16:	f7ff f911 	bl	8002f3c <xTaskResumeAll>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d20:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <prvProcessTimerOrBlockTask+0x98>)
 8003d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	f3bf 8f6f 	isb	sy
}
 8003d30:	e001      	b.n	8003d36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d32:	f7ff f903 	bl	8002f3c <xTaskResumeAll>
}
 8003d36:	bf00      	nop
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000c74 	.word	0x20000c74
 8003d44:	20000c78 	.word	0x20000c78
 8003d48:	e000ed04 	.word	0xe000ed04

08003d4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d54:	4b0e      	ldr	r3, [pc, #56]	@ (8003d90 <prvGetNextExpireTime+0x44>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bf0c      	ite	eq
 8003d5e:	2301      	moveq	r3, #1
 8003d60:	2300      	movne	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	461a      	mov	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d105      	bne.n	8003d7e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d72:	4b07      	ldr	r3, [pc, #28]	@ (8003d90 <prvGetNextExpireTime+0x44>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	e001      	b.n	8003d82 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d82:	68fb      	ldr	r3, [r7, #12]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000c70 	.word	0x20000c70

08003d94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d9c:	f7ff f96c 	bl	8003078 <xTaskGetTickCount>
 8003da0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003da2:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd0 <prvSampleTimeNow+0x3c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d205      	bcs.n	8003db8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003dac:	f000 f910 	bl	8003fd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e002      	b.n	8003dbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003dbe:	4a04      	ldr	r2, [pc, #16]	@ (8003dd0 <prvSampleTimeNow+0x3c>)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000c80 	.word	0x20000c80

08003dd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d812      	bhi.n	8003e20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	1ad2      	subs	r2, r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d302      	bcc.n	8003e0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	e01b      	b.n	8003e46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e0e:	4b10      	ldr	r3, [pc, #64]	@ (8003e50 <prvInsertTimerInActiveList+0x7c>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3304      	adds	r3, #4
 8003e16:	4619      	mov	r1, r3
 8003e18:	4610      	mov	r0, r2
 8003e1a:	f7fd fdbb 	bl	8001994 <vListInsert>
 8003e1e:	e012      	b.n	8003e46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d206      	bcs.n	8003e36 <prvInsertTimerInActiveList+0x62>
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d302      	bcc.n	8003e36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e30:	2301      	movs	r3, #1
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	e007      	b.n	8003e46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e36:	4b07      	ldr	r3, [pc, #28]	@ (8003e54 <prvInsertTimerInActiveList+0x80>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f7fd fda7 	bl	8001994 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e46:	697b      	ldr	r3, [r7, #20]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20000c74 	.word	0x20000c74
 8003e54:	20000c70 	.word	0x20000c70

08003e58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08e      	sub	sp, #56	@ 0x38
 8003e5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e5e:	e0a5      	b.n	8003fac <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	da19      	bge.n	8003e9a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	3304      	adds	r3, #4
 8003e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	61fb      	str	r3, [r7, #28]
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	e7fd      	b.n	8003e86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e90:	6850      	ldr	r0, [r2, #4]
 8003e92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e94:	6892      	ldr	r2, [r2, #8]
 8003e96:	4611      	mov	r1, r2
 8003e98:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f2c0 8085 	blt.w	8003fac <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fd fda6 	bl	8001a04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eb8:	463b      	mov	r3, r7
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff ff6a 	bl	8003d94 <prvSampleTimeNow>
 8003ec0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b09      	cmp	r3, #9
 8003ec6:	d86c      	bhi.n	8003fa2 <prvProcessReceivedCommands+0x14a>
 8003ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed0 <prvProcessReceivedCommands+0x78>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003ef9 	.word	0x08003ef9
 8003ed4:	08003ef9 	.word	0x08003ef9
 8003ed8:	08003ef9 	.word	0x08003ef9
 8003edc:	08003fa3 	.word	0x08003fa3
 8003ee0:	08003f57 	.word	0x08003f57
 8003ee4:	08003f91 	.word	0x08003f91
 8003ee8:	08003ef9 	.word	0x08003ef9
 8003eec:	08003ef9 	.word	0x08003ef9
 8003ef0:	08003fa3 	.word	0x08003fa3
 8003ef4:	08003f57 	.word	0x08003f57
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	18d1      	adds	r1, r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f06:	f7ff ff65 	bl	8003dd4 <prvInsertTimerInActiveList>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d04a      	beq.n	8003fa6 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f16:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d142      	bne.n	8003fa6 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	441a      	add	r2, r3
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2100      	movs	r1, #0
 8003f30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f32:	f7ff fe19 	bl	8003b68 <xTimerGenericCommand>
 8003f36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d133      	bne.n	8003fa6 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	61bb      	str	r3, [r7, #24]
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	e7fd      	b.n	8003f52 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <prvProcessReceivedCommands+0x124>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	617b      	str	r3, [r7, #20]
}
 8003f76:	bf00      	nop
 8003f78:	bf00      	nop
 8003f7a:	e7fd      	b.n	8003f78 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7e:	699a      	ldr	r2, [r3, #24]
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	18d1      	adds	r1, r2, r3
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f8a:	f7ff ff23 	bl	8003dd4 <prvInsertTimerInActiveList>
					break;
 8003f8e:	e00d      	b.n	8003fac <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f92:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d107      	bne.n	8003faa <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8003f9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f9c:	f000 fb78 	bl	8004690 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003fa0:	e003      	b.n	8003faa <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8003fa2:	bf00      	nop
 8003fa4:	e002      	b.n	8003fac <prvProcessReceivedCommands+0x154>
					break;
 8003fa6:	bf00      	nop
 8003fa8:	e000      	b.n	8003fac <prvProcessReceivedCommands+0x154>
					break;
 8003faa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fac:	4b07      	ldr	r3, [pc, #28]	@ (8003fcc <prvProcessReceivedCommands+0x174>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	1d39      	adds	r1, r7, #4
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe f933 	bl	8002220 <xQueueReceive>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f47f af4f 	bne.w	8003e60 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003fc2:	bf00      	nop
 8003fc4:	bf00      	nop
 8003fc6:	3730      	adds	r7, #48	@ 0x30
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000c78 	.word	0x20000c78

08003fd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fd6:	e046      	b.n	8004066 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800408c <prvSwitchTimerLists+0xbc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800408c <prvSwitchTimerLists+0xbc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fd fd07 	bl	8001a04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d12f      	bne.n	8004066 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4413      	add	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	429a      	cmp	r2, r3
 8004016:	d90e      	bls.n	8004036 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004024:	4b19      	ldr	r3, [pc, #100]	@ (800408c <prvSwitchTimerLists+0xbc>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3304      	adds	r3, #4
 800402c:	4619      	mov	r1, r3
 800402e:	4610      	mov	r0, r2
 8004030:	f7fd fcb0 	bl	8001994 <vListInsert>
 8004034:	e017      	b.n	8004066 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004036:	2300      	movs	r3, #0
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	2300      	movs	r3, #0
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	2100      	movs	r1, #0
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff fd91 	bl	8003b68 <xTimerGenericCommand>
 8004046:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10b      	bne.n	8004066 <prvSwitchTimerLists+0x96>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	603b      	str	r3, [r7, #0]
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	e7fd      	b.n	8004062 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004066:	4b09      	ldr	r3, [pc, #36]	@ (800408c <prvSwitchTimerLists+0xbc>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1b3      	bne.n	8003fd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004070:	4b06      	ldr	r3, [pc, #24]	@ (800408c <prvSwitchTimerLists+0xbc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004076:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <prvSwitchTimerLists+0xc0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a04      	ldr	r2, [pc, #16]	@ (800408c <prvSwitchTimerLists+0xbc>)
 800407c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800407e:	4a04      	ldr	r2, [pc, #16]	@ (8004090 <prvSwitchTimerLists+0xc0>)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	6013      	str	r3, [r2, #0]
}
 8004084:	bf00      	nop
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000c70 	.word	0x20000c70
 8004090:	20000c74 	.word	0x20000c74

08004094 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800409a:	f000 f92f 	bl	80042fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800409e:	4b15      	ldr	r3, [pc, #84]	@ (80040f4 <prvCheckForValidListAndQueue+0x60>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d120      	bne.n	80040e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80040a6:	4814      	ldr	r0, [pc, #80]	@ (80040f8 <prvCheckForValidListAndQueue+0x64>)
 80040a8:	f7fd fc26 	bl	80018f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80040ac:	4813      	ldr	r0, [pc, #76]	@ (80040fc <prvCheckForValidListAndQueue+0x68>)
 80040ae:	f7fd fc23 	bl	80018f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80040b2:	4b13      	ldr	r3, [pc, #76]	@ (8004100 <prvCheckForValidListAndQueue+0x6c>)
 80040b4:	4a10      	ldr	r2, [pc, #64]	@ (80040f8 <prvCheckForValidListAndQueue+0x64>)
 80040b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80040b8:	4b12      	ldr	r3, [pc, #72]	@ (8004104 <prvCheckForValidListAndQueue+0x70>)
 80040ba:	4a10      	ldr	r2, [pc, #64]	@ (80040fc <prvCheckForValidListAndQueue+0x68>)
 80040bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80040be:	2300      	movs	r3, #0
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	4b11      	ldr	r3, [pc, #68]	@ (8004108 <prvCheckForValidListAndQueue+0x74>)
 80040c4:	4a11      	ldr	r2, [pc, #68]	@ (800410c <prvCheckForValidListAndQueue+0x78>)
 80040c6:	2110      	movs	r1, #16
 80040c8:	200a      	movs	r0, #10
 80040ca:	f7fd fd2f 	bl	8001b2c <xQueueGenericCreateStatic>
 80040ce:	4603      	mov	r3, r0
 80040d0:	4a08      	ldr	r2, [pc, #32]	@ (80040f4 <prvCheckForValidListAndQueue+0x60>)
 80040d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80040d4:	4b07      	ldr	r3, [pc, #28]	@ (80040f4 <prvCheckForValidListAndQueue+0x60>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040dc:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <prvCheckForValidListAndQueue+0x60>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	490b      	ldr	r1, [pc, #44]	@ (8004110 <prvCheckForValidListAndQueue+0x7c>)
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fc5c 	bl	80029a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040e8:	f000 f938 	bl	800435c <vPortExitCritical>
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000c78 	.word	0x20000c78
 80040f8:	20000c48 	.word	0x20000c48
 80040fc:	20000c5c 	.word	0x20000c5c
 8004100:	20000c70 	.word	0x20000c70
 8004104:	20000c74 	.word	0x20000c74
 8004108:	20000d24 	.word	0x20000d24
 800410c:	20000c84 	.word	0x20000c84
 8004110:	080049ac 	.word	0x080049ac

08004114 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3b04      	subs	r3, #4
 8004124:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800412c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3b04      	subs	r3, #4
 8004132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f023 0201 	bic.w	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3b04      	subs	r3, #4
 8004142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004144:	4a08      	ldr	r2, [pc, #32]	@ (8004168 <pxPortInitialiseStack+0x54>)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3b14      	subs	r3, #20
 800414e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3b20      	subs	r3, #32
 800415a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800415c:	68fb      	ldr	r3, [r7, #12]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr
 8004168:	0800416d 	.word	0x0800416d

0800416c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004172:	2300      	movs	r3, #0
 8004174:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004176:	4b12      	ldr	r3, [pc, #72]	@ (80041c0 <prvTaskExitError+0x54>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d00b      	beq.n	8004198 <prvTaskExitError+0x2c>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	60fb      	str	r3, [r7, #12]
}
 8004192:	bf00      	nop
 8004194:	bf00      	nop
 8004196:	e7fd      	b.n	8004194 <prvTaskExitError+0x28>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	60bb      	str	r3, [r7, #8]
}
 80041aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041ac:	bf00      	nop
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0fc      	beq.n	80041ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr
 80041c0:	20000010 	.word	0x20000010
	...

080041d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041d0:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <pxCurrentTCBConst2>)
 80041d2:	6819      	ldr	r1, [r3, #0]
 80041d4:	6808      	ldr	r0, [r1, #0]
 80041d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041da:	f380 8809 	msr	PSP, r0
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f380 8811 	msr	BASEPRI, r0
 80041ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80041ee:	4770      	bx	lr

080041f0 <pxCurrentTCBConst2>:
 80041f0:	20000748 	.word	0x20000748
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop

080041f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80041f8:	4806      	ldr	r0, [pc, #24]	@ (8004214 <prvPortStartFirstTask+0x1c>)
 80041fa:	6800      	ldr	r0, [r0, #0]
 80041fc:	6800      	ldr	r0, [r0, #0]
 80041fe:	f380 8808 	msr	MSP, r0
 8004202:	b662      	cpsie	i
 8004204:	b661      	cpsie	f
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	df00      	svc	0
 8004210:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004212:	bf00      	nop
 8004214:	e000ed08 	.word	0xe000ed08

08004218 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800421e:	4b32      	ldr	r3, [pc, #200]	@ (80042e8 <xPortStartScheduler+0xd0>)
 8004220:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	22ff      	movs	r2, #255	@ 0xff
 800422e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004240:	b2da      	uxtb	r2, r3
 8004242:	4b2a      	ldr	r3, [pc, #168]	@ (80042ec <xPortStartScheduler+0xd4>)
 8004244:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004246:	4b2a      	ldr	r3, [pc, #168]	@ (80042f0 <xPortStartScheduler+0xd8>)
 8004248:	2207      	movs	r2, #7
 800424a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800424c:	e009      	b.n	8004262 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800424e:	4b28      	ldr	r3, [pc, #160]	@ (80042f0 <xPortStartScheduler+0xd8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3b01      	subs	r3, #1
 8004254:	4a26      	ldr	r2, [pc, #152]	@ (80042f0 <xPortStartScheduler+0xd8>)
 8004256:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	b2db      	uxtb	r3, r3
 8004260:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426a:	2b80      	cmp	r3, #128	@ 0x80
 800426c:	d0ef      	beq.n	800424e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800426e:	4b20      	ldr	r3, [pc, #128]	@ (80042f0 <xPortStartScheduler+0xd8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f1c3 0307 	rsb	r3, r3, #7
 8004276:	2b04      	cmp	r3, #4
 8004278:	d00b      	beq.n	8004292 <xPortStartScheduler+0x7a>
	__asm volatile
 800427a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	60bb      	str	r3, [r7, #8]
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	e7fd      	b.n	800428e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004292:	4b17      	ldr	r3, [pc, #92]	@ (80042f0 <xPortStartScheduler+0xd8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	4a15      	ldr	r2, [pc, #84]	@ (80042f0 <xPortStartScheduler+0xd8>)
 800429a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800429c:	4b14      	ldr	r3, [pc, #80]	@ (80042f0 <xPortStartScheduler+0xd8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042a4:	4a12      	ldr	r2, [pc, #72]	@ (80042f0 <xPortStartScheduler+0xd8>)
 80042a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042b0:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <xPortStartScheduler+0xdc>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a0f      	ldr	r2, [pc, #60]	@ (80042f4 <xPortStartScheduler+0xdc>)
 80042b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042bc:	4b0d      	ldr	r3, [pc, #52]	@ (80042f4 <xPortStartScheduler+0xdc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a0c      	ldr	r2, [pc, #48]	@ (80042f4 <xPortStartScheduler+0xdc>)
 80042c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80042c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042c8:	f000 f8b8 	bl	800443c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042cc:	4b0a      	ldr	r3, [pc, #40]	@ (80042f8 <xPortStartScheduler+0xe0>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042d2:	f7ff ff91 	bl	80041f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042d6:	f7fe ff9d 	bl	8003214 <vTaskSwitchContext>
	prvTaskExitError();
 80042da:	f7ff ff47 	bl	800416c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	e000e400 	.word	0xe000e400
 80042ec:	20000d74 	.word	0x20000d74
 80042f0:	20000d78 	.word	0x20000d78
 80042f4:	e000ed20 	.word	0xe000ed20
 80042f8:	20000010 	.word	0x20000010

080042fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
	__asm volatile
 8004302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	607b      	str	r3, [r7, #4]
}
 8004314:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004316:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <vPortEnterCritical+0x58>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3301      	adds	r3, #1
 800431c:	4a0d      	ldr	r2, [pc, #52]	@ (8004354 <vPortEnterCritical+0x58>)
 800431e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004320:	4b0c      	ldr	r3, [pc, #48]	@ (8004354 <vPortEnterCritical+0x58>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d110      	bne.n	800434a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004328:	4b0b      	ldr	r3, [pc, #44]	@ (8004358 <vPortEnterCritical+0x5c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <vPortEnterCritical+0x4e>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	603b      	str	r3, [r7, #0]
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	e7fd      	b.n	8004346 <vPortEnterCritical+0x4a>
	}
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr
 8004354:	20000010 	.word	0x20000010
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004362:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <vPortExitCritical+0x50>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10b      	bne.n	8004382 <vPortExitCritical+0x26>
	__asm volatile
 800436a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436e:	f383 8811 	msr	BASEPRI, r3
 8004372:	f3bf 8f6f 	isb	sy
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	607b      	str	r3, [r7, #4]
}
 800437c:	bf00      	nop
 800437e:	bf00      	nop
 8004380:	e7fd      	b.n	800437e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004382:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <vPortExitCritical+0x50>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3b01      	subs	r3, #1
 8004388:	4a08      	ldr	r2, [pc, #32]	@ (80043ac <vPortExitCritical+0x50>)
 800438a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800438c:	4b07      	ldr	r3, [pc, #28]	@ (80043ac <vPortExitCritical+0x50>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <vPortExitCritical+0x44>
 8004394:	2300      	movs	r3, #0
 8004396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f383 8811 	msr	BASEPRI, r3
}
 800439e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000010 	.word	0x20000010

080043b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043b0:	f3ef 8009 	mrs	r0, PSP
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	4b0d      	ldr	r3, [pc, #52]	@ (80043f0 <pxCurrentTCBConst>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043c0:	6010      	str	r0, [r2, #0]
 80043c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80043c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80043ca:	f380 8811 	msr	BASEPRI, r0
 80043ce:	f7fe ff21 	bl	8003214 <vTaskSwitchContext>
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f380 8811 	msr	BASEPRI, r0
 80043da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80043de:	6819      	ldr	r1, [r3, #0]
 80043e0:	6808      	ldr	r0, [r1, #0]
 80043e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043e6:	f380 8809 	msr	PSP, r0
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	4770      	bx	lr

080043f0 <pxCurrentTCBConst>:
 80043f0:	20000748 	.word	0x20000748
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop

080043f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	607b      	str	r3, [r7, #4]
}
 8004410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004412:	f7fe fe3f 	bl	8003094 <xTaskIncrementTick>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800441c:	4b06      	ldr	r3, [pc, #24]	@ (8004438 <xPortSysTickHandler+0x40>)
 800441e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	2300      	movs	r3, #0
 8004426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	f383 8811 	msr	BASEPRI, r3
}
 800442e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	e000ed04 	.word	0xe000ed04

0800443c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004440:	4b0a      	ldr	r3, [pc, #40]	@ (800446c <vPortSetupTimerInterrupt+0x30>)
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004446:	4b0a      	ldr	r3, [pc, #40]	@ (8004470 <vPortSetupTimerInterrupt+0x34>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800444c:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <vPortSetupTimerInterrupt+0x38>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a09      	ldr	r2, [pc, #36]	@ (8004478 <vPortSetupTimerInterrupt+0x3c>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	099b      	lsrs	r3, r3, #6
 8004458:	4a08      	ldr	r2, [pc, #32]	@ (800447c <vPortSetupTimerInterrupt+0x40>)
 800445a:	3b01      	subs	r3, #1
 800445c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800445e:	4b03      	ldr	r3, [pc, #12]	@ (800446c <vPortSetupTimerInterrupt+0x30>)
 8004460:	2207      	movs	r2, #7
 8004462:	601a      	str	r2, [r3, #0]
}
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr
 800446c:	e000e010 	.word	0xe000e010
 8004470:	e000e018 	.word	0xe000e018
 8004474:	20000004 	.word	0x20000004
 8004478:	10624dd3 	.word	0x10624dd3
 800447c:	e000e014 	.word	0xe000e014

08004480 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004486:	f3ef 8305 	mrs	r3, IPSR
 800448a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b0f      	cmp	r3, #15
 8004490:	d915      	bls.n	80044be <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004492:	4a17      	ldr	r2, [pc, #92]	@ (80044f0 <vPortValidateInterruptPriority+0x70>)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800449c:	4b15      	ldr	r3, [pc, #84]	@ (80044f4 <vPortValidateInterruptPriority+0x74>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	7afa      	ldrb	r2, [r7, #11]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d20b      	bcs.n	80044be <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80044a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	607b      	str	r3, [r7, #4]
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	e7fd      	b.n	80044ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044be:	4b0e      	ldr	r3, [pc, #56]	@ (80044f8 <vPortValidateInterruptPriority+0x78>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044c6:	4b0d      	ldr	r3, [pc, #52]	@ (80044fc <vPortValidateInterruptPriority+0x7c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d90b      	bls.n	80044e6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	603b      	str	r3, [r7, #0]
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	e7fd      	b.n	80044e2 <vPortValidateInterruptPriority+0x62>
	}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	e000e3f0 	.word	0xe000e3f0
 80044f4:	20000d74 	.word	0x20000d74
 80044f8:	e000ed0c 	.word	0xe000ed0c
 80044fc:	20000d78 	.word	0x20000d78

08004500 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08a      	sub	sp, #40	@ 0x28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800450c:	f7fe fd08 	bl	8002f20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004510:	4b5a      	ldr	r3, [pc, #360]	@ (800467c <pvPortMalloc+0x17c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004518:	f000 f916 	bl	8004748 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800451c:	4b58      	ldr	r3, [pc, #352]	@ (8004680 <pvPortMalloc+0x180>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	f040 8090 	bne.w	800464a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01e      	beq.n	800456e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004530:	2208      	movs	r2, #8
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4413      	add	r3, r2
 8004536:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	2b00      	cmp	r3, #0
 8004540:	d015      	beq.n	800456e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f023 0307 	bic.w	r3, r3, #7
 8004548:	3308      	adds	r3, #8
 800454a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <pvPortMalloc+0x6e>
	__asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	617b      	str	r3, [r7, #20]
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	e7fd      	b.n	800456a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d06a      	beq.n	800464a <pvPortMalloc+0x14a>
 8004574:	4b43      	ldr	r3, [pc, #268]	@ (8004684 <pvPortMalloc+0x184>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	429a      	cmp	r2, r3
 800457c:	d865      	bhi.n	800464a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800457e:	4b42      	ldr	r3, [pc, #264]	@ (8004688 <pvPortMalloc+0x188>)
 8004580:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004582:	4b41      	ldr	r3, [pc, #260]	@ (8004688 <pvPortMalloc+0x188>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004588:	e004      	b.n	8004594 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	429a      	cmp	r2, r3
 800459c:	d903      	bls.n	80045a6 <pvPortMalloc+0xa6>
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f1      	bne.n	800458a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045a6:	4b35      	ldr	r3, [pc, #212]	@ (800467c <pvPortMalloc+0x17c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d04c      	beq.n	800464a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2208      	movs	r2, #8
 80045b6:	4413      	add	r3, r2
 80045b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	1ad2      	subs	r2, r2, r3
 80045ca:	2308      	movs	r3, #8
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d920      	bls.n	8004614 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4413      	add	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <pvPortMalloc+0xfc>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	613b      	str	r3, [r7, #16]
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	e7fd      	b.n	80045f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	1ad2      	subs	r2, r2, r3
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800460e:	69b8      	ldr	r0, [r7, #24]
 8004610:	f000 f8fc 	bl	800480c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004614:	4b1b      	ldr	r3, [pc, #108]	@ (8004684 <pvPortMalloc+0x184>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	4a19      	ldr	r2, [pc, #100]	@ (8004684 <pvPortMalloc+0x184>)
 8004620:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004622:	4b18      	ldr	r3, [pc, #96]	@ (8004684 <pvPortMalloc+0x184>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4b19      	ldr	r3, [pc, #100]	@ (800468c <pvPortMalloc+0x18c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d203      	bcs.n	8004636 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800462e:	4b15      	ldr	r3, [pc, #84]	@ (8004684 <pvPortMalloc+0x184>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a16      	ldr	r2, [pc, #88]	@ (800468c <pvPortMalloc+0x18c>)
 8004634:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	4b11      	ldr	r3, [pc, #68]	@ (8004680 <pvPortMalloc+0x180>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	431a      	orrs	r2, r3
 8004640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004642:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800464a:	f7fe fc77 	bl	8002f3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00b      	beq.n	8004670 <pvPortMalloc+0x170>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	60fb      	str	r3, [r7, #12]
}
 800466a:	bf00      	nop
 800466c:	bf00      	nop
 800466e:	e7fd      	b.n	800466c <pvPortMalloc+0x16c>
	return pvReturn;
 8004670:	69fb      	ldr	r3, [r7, #28]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3728      	adds	r7, #40	@ 0x28
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20001984 	.word	0x20001984
 8004680:	20001990 	.word	0x20001990
 8004684:	20001988 	.word	0x20001988
 8004688:	2000197c 	.word	0x2000197c
 800468c:	2000198c 	.word	0x2000198c

08004690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d04a      	beq.n	8004738 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80046a2:	2308      	movs	r3, #8
 80046a4:	425b      	negs	r3, r3
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4413      	add	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	4b22      	ldr	r3, [pc, #136]	@ (8004740 <vPortFree+0xb0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10b      	bne.n	80046d6 <vPortFree+0x46>
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	60fb      	str	r3, [r7, #12]
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	e7fd      	b.n	80046d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00b      	beq.n	80046f6 <vPortFree+0x66>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	60bb      	str	r3, [r7, #8]
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	e7fd      	b.n	80046f2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	4b11      	ldr	r3, [pc, #68]	@ (8004740 <vPortFree+0xb0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d019      	beq.n	8004738 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d115      	bne.n	8004738 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	4b0b      	ldr	r3, [pc, #44]	@ (8004740 <vPortFree+0xb0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	43db      	mvns	r3, r3
 8004716:	401a      	ands	r2, r3
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800471c:	f7fe fc00 	bl	8002f20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	4b07      	ldr	r3, [pc, #28]	@ (8004744 <vPortFree+0xb4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4413      	add	r3, r2
 800472a:	4a06      	ldr	r2, [pc, #24]	@ (8004744 <vPortFree+0xb4>)
 800472c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800472e:	6938      	ldr	r0, [r7, #16]
 8004730:	f000 f86c 	bl	800480c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004734:	f7fe fc02 	bl	8002f3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004738:	bf00      	nop
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	20001990 	.word	0x20001990
 8004744:	20001988 	.word	0x20001988

08004748 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800474e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004752:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004754:	4b27      	ldr	r3, [pc, #156]	@ (80047f4 <prvHeapInit+0xac>)
 8004756:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00c      	beq.n	800477c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3307      	adds	r3, #7
 8004766:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0307 	bic.w	r3, r3, #7
 800476e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	4a1f      	ldr	r2, [pc, #124]	@ (80047f4 <prvHeapInit+0xac>)
 8004778:	4413      	add	r3, r2
 800477a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004780:	4a1d      	ldr	r2, [pc, #116]	@ (80047f8 <prvHeapInit+0xb0>)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004786:	4b1c      	ldr	r3, [pc, #112]	@ (80047f8 <prvHeapInit+0xb0>)
 8004788:	2200      	movs	r2, #0
 800478a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	4413      	add	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004794:	2208      	movs	r2, #8
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0307 	bic.w	r3, r3, #7
 80047a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4a15      	ldr	r2, [pc, #84]	@ (80047fc <prvHeapInit+0xb4>)
 80047a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047aa:	4b14      	ldr	r3, [pc, #80]	@ (80047fc <prvHeapInit+0xb4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2200      	movs	r2, #0
 80047b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047b2:	4b12      	ldr	r3, [pc, #72]	@ (80047fc <prvHeapInit+0xb4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	1ad2      	subs	r2, r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047c8:	4b0c      	ldr	r3, [pc, #48]	@ (80047fc <prvHeapInit+0xb4>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004800 <prvHeapInit+0xb8>)
 80047d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4a09      	ldr	r2, [pc, #36]	@ (8004804 <prvHeapInit+0xbc>)
 80047de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047e0:	4b09      	ldr	r3, [pc, #36]	@ (8004808 <prvHeapInit+0xc0>)
 80047e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80047e6:	601a      	str	r2, [r3, #0]
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000d7c 	.word	0x20000d7c
 80047f8:	2000197c 	.word	0x2000197c
 80047fc:	20001984 	.word	0x20001984
 8004800:	2000198c 	.word	0x2000198c
 8004804:	20001988 	.word	0x20001988
 8004808:	20001990 	.word	0x20001990

0800480c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004814:	4b27      	ldr	r3, [pc, #156]	@ (80048b4 <prvInsertBlockIntoFreeList+0xa8>)
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	e002      	b.n	8004820 <prvInsertBlockIntoFreeList+0x14>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	429a      	cmp	r2, r3
 8004828:	d8f7      	bhi.n	800481a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	4413      	add	r3, r2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	429a      	cmp	r2, r3
 800483a:	d108      	bne.n	800484e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	441a      	add	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	441a      	add	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d118      	bne.n	8004894 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b14      	ldr	r3, [pc, #80]	@ (80048b8 <prvInsertBlockIntoFreeList+0xac>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d00d      	beq.n	800488a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	441a      	add	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	e008      	b.n	800489c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800488a:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <prvInsertBlockIntoFreeList+0xac>)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e003      	b.n	800489c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d002      	beq.n	80048aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr
 80048b4:	2000197c 	.word	0x2000197c
 80048b8:	20001984 	.word	0x20001984

080048bc <memset>:
 80048bc:	4603      	mov	r3, r0
 80048be:	4402      	add	r2, r0
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d100      	bne.n	80048c6 <memset+0xa>
 80048c4:	4770      	bx	lr
 80048c6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ca:	e7f9      	b.n	80048c0 <memset+0x4>

080048cc <__libc_init_array>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	2600      	movs	r6, #0
 80048d0:	4d0c      	ldr	r5, [pc, #48]	@ (8004904 <__libc_init_array+0x38>)
 80048d2:	4c0d      	ldr	r4, [pc, #52]	@ (8004908 <__libc_init_array+0x3c>)
 80048d4:	1b64      	subs	r4, r4, r5
 80048d6:	10a4      	asrs	r4, r4, #2
 80048d8:	42a6      	cmp	r6, r4
 80048da:	d109      	bne.n	80048f0 <__libc_init_array+0x24>
 80048dc:	f000 f828 	bl	8004930 <_init>
 80048e0:	2600      	movs	r6, #0
 80048e2:	4d0a      	ldr	r5, [pc, #40]	@ (800490c <__libc_init_array+0x40>)
 80048e4:	4c0a      	ldr	r4, [pc, #40]	@ (8004910 <__libc_init_array+0x44>)
 80048e6:	1b64      	subs	r4, r4, r5
 80048e8:	10a4      	asrs	r4, r4, #2
 80048ea:	42a6      	cmp	r6, r4
 80048ec:	d105      	bne.n	80048fa <__libc_init_array+0x2e>
 80048ee:	bd70      	pop	{r4, r5, r6, pc}
 80048f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f4:	4798      	blx	r3
 80048f6:	3601      	adds	r6, #1
 80048f8:	e7ee      	b.n	80048d8 <__libc_init_array+0xc>
 80048fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80048fe:	4798      	blx	r3
 8004900:	3601      	adds	r6, #1
 8004902:	e7f2      	b.n	80048ea <__libc_init_array+0x1e>
 8004904:	08004a78 	.word	0x08004a78
 8004908:	08004a78 	.word	0x08004a78
 800490c:	08004a78 	.word	0x08004a78
 8004910:	08004a7c 	.word	0x08004a7c

08004914 <memcpy>:
 8004914:	440a      	add	r2, r1
 8004916:	4291      	cmp	r1, r2
 8004918:	f100 33ff 	add.w	r3, r0, #4294967295
 800491c:	d100      	bne.n	8004920 <memcpy+0xc>
 800491e:	4770      	bx	lr
 8004920:	b510      	push	{r4, lr}
 8004922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004926:	4291      	cmp	r1, r2
 8004928:	f803 4f01 	strb.w	r4, [r3, #1]!
 800492c:	d1f9      	bne.n	8004922 <memcpy+0xe>
 800492e:	bd10      	pop	{r4, pc}

08004930 <_init>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	bf00      	nop
 8004934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004936:	bc08      	pop	{r3}
 8004938:	469e      	mov	lr, r3
 800493a:	4770      	bx	lr

0800493c <_fini>:
 800493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800493e:	bf00      	nop
 8004940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004942:	bc08      	pop	{r3}
 8004944:	469e      	mov	lr, r3
 8004946:	4770      	bx	lr
